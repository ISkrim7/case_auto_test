#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/14# @Author : cyq# @File : locustUser# @Software: PyCharm# @Desc:from queue import Queuefrom typing import Optional, Dict, Anyfrom app.schema.interface import InterfaceApiSchema,PerfSchemafrom locust import HttpUser, task, FastHttpUser, betweenfrom utils import logfrom utils.transform import Transform, SyncTransFormdef create_dynamic_user_class(apiInfo: InterfaceApiSchema, perfSetting: PerfSchema):    """    动态创建 User 类，根据传入的 API 配置生成对应的测试方法    参数:    - apiInfo: API Info    - perfSetting: Perf信息    """    # 预先初始化队列    DQ = None    if perfSetting.file_name:        from utils.fileManager import FileManager        DQ = FileManager.file_reader_for_perf(perfSetting.file_name, q=True)        log.debug(f"Pre-initialized data queue with {DQ.qsize()} items")    class DynamicApiUser(FastHttpUser):        # 等待时间        wait_time = between(*perfSetting.perf_wait_range)        _data_queue: Optional[Queue] = DQ        _data_initialized =  None        @property        def data_queue(self) -> Queue:            return self._data_queue        # def _init_data_queue(self):        #     """初始化测试数据队列"""        #     if not self._data_initialized and perfSetting.file_name:  # 只有file_name存在时才初始化        #         from utils.fileManager import FileManager        #         try:        #             self._data_queue = FileManager.file_reader_for_perf(        #                 perfSetting.file_name,        #                 q=True        #             )        #             log.info(f"Initialized data queue with {self._data_queue.qsize()} items")        #         except Exception as e:        #             log.error(f"Failed to initialize data queue: {str(e)}")        #             raise        @task        def dynamic_task(self):            """动态生成的任务方法"""            var_data = None            requestInfo = apiInfo.requestInfo            try:                if self.data_queue:                    var_data = self._get_test_data()                    if var_data:                        requestInfo = self._prepare_request(requestInfo, var_data)                # log.debug(f"requestInfo: {requestInfo}")                self._execute_request(apiInfo, requestInfo)            finally:                # 确保数据放回队列                if var_data and self._data_queue:                    self._return_test_data(var_data)        @staticmethod        def _prepare_request(base_request: Dict[str, Any], test_data: Dict[str, Any]) -> Dict[str, Any]:            """准备请求参数"""            try:                return SyncTransForm.transform(base_request, test_data)  # 避免修改原始请求            except Exception as e:                log.error(f"Failed to prepare request: {str(e)}")                raise        def _execute_request(self, api_info: InterfaceApiSchema, request_info: Dict[str, Any]):            """执行API请求"""            with getattr(self.client, api_info.method.lower())(                    api_info.url,                    name=f"{api_info.method} {api_info.url}",                    catch_response=True,                    **request_info            ) as response:                self._handle_response(response)        @staticmethod        def _handle_response(response):            """            处理API响应            # todo 加入自定义断言            """            # log.error(response.text)            try:                if response.status_code == 200:                    response.success()                else:                    response.failure(f"Unexpected status code: {response.status_code}")                    log.warning(f"Request failed: {response.status_code}")            except Exception as e:                response.failure(f"Response handling error: {str(e)}")                log.error(f"Error handling response: {str(e)}")        def _get_test_data(self):            """从队列获取测试数据"""            try:                return self.data_queue.get_nowait()            except Exception as e:                log.warning(f"Failed to get test data: {str(e)}")                return None        def _return_test_data(self, data: Dict[str, Any]):            """将测试数据返回队列"""            try:                self.data_queue.put(data)            except Exception as e:                log.warning(f"Failed to return test data to queue: {str(e)}")    return DynamicApiUser