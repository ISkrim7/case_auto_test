from typing import Any, Dictfrom redis.asyncio import Redisfrom redis import Redis as SyncRedisfrom config import Configfrom utils import MyLogurulog = MyLoguru().get_logger()class RedisClient:    r: Redis = None    async def init_pool(self):        self.r = Redis(host=Config.REDIS_SERVER,                       port=Config.REDIS_PORT,                       db=Config.REDIS_DB,                       password=Config.REDIS_PASSWORD,                       decode_responses=True,                       max_connections=100)        try:            await self.r.ping()        except Exception as e:            log.error(f"Redis connection failed: {e}")            raise    @staticmethod    async def connect(db_host, db_port, db_username, db_password, db_database):        try:            await Redis(                host=db_host,                port=db_port,                username=db_username,                password=db_password,                db=db_database,                decode_responses=True,                max_connections=100            )        except Exception as e:            from app.exception import CommonError            raise CommonError(f"redis连接失败:{e}")    async def close_pool(self):        if self.r:            await self.r.close()    async def set_pool(self, **kwargs):        log.debug(kwargs)        self.r = Redis(**kwargs)    async def check_key_exist(self, key: str) -> int:        return await self.r.exists(key)    async def h_set(self, name: str, value: Dict                                            [str, Any] | str):        try:            return await  self.r.hset(name=name, mapping=value)        except Exception as e:            raise e    async def h_get_all(self, key: str):        return await self.r.hgetall(key)    async def l_push(self, name: str, values: Any):        try:            return await self.r.lpush(name, values)        except Exception as e:            raise e    async def l_range(self, name: str):        return await self.r.lrange(name, 0, -1)    async def remove_key(self, key: str):        return await self.r.delete(key)    async def clear_all_record(self):        keys = await self.r.keys("record_*")        for key in keys:            await self.r.delete(key)    async def execute_script(self, script: str, ):        try:            return await self.r.execute_command(script)        except Exception as e:            log.error(e)            return None        # 新增缓存方法class SyncRedisClient:    r: SyncRedis = None    perf_name: str    def init_pool(self):        self.r = SyncRedis(host=Config.REDIS_SERVER,                           port=Config.REDIS_PORT,                           db=Config.REDIS_DB,                           password=Config.REDIS_PASSWORD,                           decode_responses=True,                           max_connections=100)    def perf_l_push(self, values: str):        try:            return self.r.lpush(self.perf_name, values, )        except Exception as e:            raise e    def perf_l_range(self):        return self.r.lrange(self.perf_name, 0, -1)# 依赖注入async def get_redis() -> RedisClient:    try:        redis = RedisClient()        await redis.init_pool()        yield redis    except ConnectionError as e:        log.warning("redis Connect call failed")    finally:        await redis.close_pool()async def main():    redis_client = RedisClient()    await redis_client.init_pool()    a = {"name": "test", "age": 18}    b = {"name": "123", "age": 222}    await redis_client.l_push("da", str(a))    await redis_client.l_push("da", str(b))    data = await redis_client.l_range("da")    print(data)def main2():    redis_client = SyncRedisClient()    redis_client.init_pool()    redis_client.perf_name = "fff"    a = {"name": "test", "age": 18}    b = {"name": "123", "age": 222}    redis_client.perf_l_push(str(a))    redis_client.perf_l_push(str(b))    data = redis_client.perf_l_range()    print(data)if __name__ == '__main__':    main2()