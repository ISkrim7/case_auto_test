#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/7/3# @Author : cyq# @File : report2# @Software: PyCharm# @Desc:import aiosmtplibfrom app.model.interface import InterfaceTask, InterfaceTaskResultModelfrom app.model.playUI import PlayTaskResult, PlayTaskfrom enums.PushEnum import PushEnumfrom common.httpxClient import HttpxClientfrom config import Configfrom ._myLoguru import MyLogurufrom email.mime.multipart import MIMEMultipartfrom email.mime.text import MIMETextlog = MyLoguru().get_logger()PathMap = {    "UI": {"report": Config.UI_REPORT_URL,           "task": Config.UI_TASK_URL},    "API": {"report": Config.Inter_REPORT_URL,            "task": Config.Inter_TASK_URL}}class ReportPush:    """    send msg to [weChat,Email ...]    """    def __init__(self, push_type: int, push_value: str):        self._push_type = push_type        self._push_value = push_value        self.sender = HttpxClient()    async def push(self, taskModel: InterfaceTask | PlayTask,                   baseModel: InterfaceTaskResultModel | PlayTaskResult):        try:            match self._push_type:                case PushEnum.WeWork:                    if isinstance(taskModel, InterfaceTask) and isinstance(baseModel, InterfaceTaskResultModel):                        return await self.api2weWork(taskModel, baseModel)                    else:                        return await self.ui2weWork(taskModel, baseModel)                case PushEnum.Email:                    if isinstance(taskModel, InterfaceTask) and isinstance(baseModel, InterfaceTaskResultModel):                        body, Subject = await self.__email_template("API", taskModel.title, taskModel.id, baseModel.id,                                                                    baseModel.starterName, baseModel.totalNumber,                                                                    baseModel.totalUseTime, baseModel.successNumber,                                                                    baseModel.failNumber)                        return await self.__email_send(subject=Subject, body=body)                    else:                        body, Subject = await self.__email_template("UI", taskModel.title, taskModel.id, baseModel.id,                                                                    baseModel.starter_name, baseModel.total_number,                                                                    baseModel.total_usetime, baseModel.success_number,                                                                    baseModel.fail_number)                        return await self.__email_send(subject=Subject, body=body)                case _:                    log.error(f"push type error")        except Exception as e:            log.error(f"push error: {e}")    async def ui2weWork(self, taskModel: PlayTask, baseModel: PlayTaskResult):        """        将UI任务模型和基础模型的信息格式化后发送到企业微信。        :param taskModel: UI任务模型，包含任务的相关信息。        :param baseModel: UI测试任务结果基础模型，包含测试任务的结果数据。        :return: 无返回值。        """        _template = await self.__we_work_template("UI", taskModel.title, taskModel.id, baseModel.id,                                                  baseModel.starter_name, baseModel.total_number,                                                  baseModel.total_usetime,                                                  baseModel.success_number, baseModel.fail_number)        return await self.__wechat_send(content=_template, key="as")    async def api2weWork(self, taskModel: InterfaceTask, baseModel: InterfaceTaskResultModel):        """        将API任务模型和基础模型的信息格式化后发送到企业微信。        :param taskModel: API任务模型，包含任务的相关信息。        :param baseModel: API测试任务结果基础模型，包含测试任务的结果数据。        :return: 无返回值。        """        _template = await self.__we_work_template("API", taskModel.title, taskModel.id, baseModel.id,                                                  baseModel.starterName, baseModel.totalNumber, baseModel.totalUseTime,                                                  baseModel.successNumber, baseModel.failNumber)        return await self.__wechat_send(content=_template, key="as")    @staticmethod    async def __we_work_template(typeName: str, title: str, taskId: int,                                 resultId: int, starterName: str, totalNumber: int,                                 totalUseTime: str, successNumber: int, failNumber: int):        path = PathMap[typeName]        if failNumber == 0:            result = "**结果**：<font color=\"info\">✅ 通过</font> [点我查看详情]"        else:            result = f"**结果**：<font color=\"warning\">❌ 异常</font> [点我查看详情]"        result += f"({path['report']}{resultId})"        _template = f"""                  ## {type}自动化任务: <font> [{title}]({path['task'] + taskId}) </font> 测试完成                  > 执行人: {starterName}                  > 执行用时：{totalNumber}                  > 执行用例数量：{totalUseTime}                  > 成功：{successNumber}                  > 失败：{failNumber}                  > {result}                  """        return _template    @staticmethod    async def __email_template(typeName: str, title: str, taskId: int,                               resultId: int, starterName: str, totalNumber: int,                               totalUseTime: str, successNumber: int, failNumber: int):        path = PathMap[typeName]        Subject = f"{typeName}自动化任务: <font> [{title}]({path['task'] + taskId}) </font> 测试完成"        if failNumber == 0:            Subject += "✅ 通过"            result = "**结果**：<font color=\"info\">✅ 通过</font> [点我查看详情]"        else:            Subject += f"❌ 异常"            result = f"**结果**：<font color=\"warning\">❌ 异常</font> [点我查看详情]"        result += f"({path['report']}{resultId})"        _template = f"""                  > 执行人: {starterName}                  > 执行用时：{totalNumber}                  > 执行用例数量：{totalUseTime}                  > 成功：{successNumber}                  > 失败：{failNumber}                  > {result}                  """        return _template, Subject    async def __wechat_send(self, content: str, **kwargs):        _ = {            "msgtype": "markdown",            "markdown": {                "content": content            }        }        response = await self.sender(url=Config.WeChatBaseUrl,                                     method="post",                                     params={"key": self._push_value},                                     json=_,                                     headers={"Content-Type": "application/json"},                                     **kwargs)        if response.is_success:            log.info(f"send wechat success")        else:            log.error(f"send wechat fail")    async def __email_send(self, subject: str, body: str):        # 设置邮件内容        msg = MIMEMultipart()        msg['From'] = Config.Email_Sender_Username        msg['To'] = self._push_value        msg['Subject'] = subject        msg.attach(MIMEText(body, 'plain'))        try:            # 建立安全连接            async with aiosmtplib.SMTP(hostname="smtp.163.com", timeout=10) as server:                # server.starttls()  # 启用 TLS 加密                # server.set_debuglevel(1)  # 启用调试输出                await server.login(Config.Email_Sender_Username, Config.Email_Sender_Password)  # 登录到邮件服务器                await server.send_message(msg)            log.info("邮件发送成功")        except Exception as e:            log.error(f"邮件发送失败。error : {e}")