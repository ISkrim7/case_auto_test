#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/8/12# @Author : cyq# @File : assertsUtil# @Software: PyCharm# @Desc:import jsonfrom typing import Anyfrom utils import Toolsclass ExpectType:    String = "string"    Integer = "integer"    Bool = "bool"    Object = "object"    Float = "float"def _convert_value(expect: Any, T: str):    """    预期值根据类型转化    """    try:        match T:            case ExpectType.String:                return str(expect)            case ExpectType.Integer:                return int(expect)            case ExpectType.Float:                return float(expect)            case ExpectType.Bool:                return bool(expect)            case ExpectType.Object:                decoder = json.JSONDecoder(strict=False)                return decoder.decode(expect)            case _:                raise ValueError(f"Unknown type: {T}")    except (ValueError, TypeError) as e:        return expectclass MyAsserts:    @classmethod    def option(cls, assertOpt: str, expect: Any, actual: Any, extraValueType: str = None, **kwargs):        """        断言配置        :param assertOpt: 断言方法        :param expect: 预期值        :param actual: 实际值        :param extraValueType: 预期值类型        :return:        """        # if extraValueType:        #     expect = _convert_value(expect, extraValueType)        expect = Tools.str_trans(expect)        match assertOpt:            case "==":                return cls.assertEqual(expect, actual)            case "!=":                return cls.assertUnEqual(expect, actual)            case ">":                return cls.assertGreater(expect, actual)            case "<":                return cls.assertLess(expect, actual)            case ">=":                return cls.assertEqualGreater(expect, actual)            case "<=":                return cls.assertEqualLess(expect, actual)            case "in":                return cls.assertIn(expect, actual)            case "notIn":                return cls.assertNotIn(expect, actual)    @staticmethod    def assertEqual(expect: Any, actual: Any):        """        校验相等        :param expect: 预期值        :param actual: 实际值        :assert expect == actual        """        try:            assert expect == actual, f"expect:{expect} != actual:{actual}"        except Exception as e:            raise e    @staticmethod    def assertUnEqual(expect: Any, actual: Any):        """        校验不相等        :param expect:        :param actual:        :return:expect != actual        """        assert expect != actual, f"expect:{expect} == actual:{actual}"    @staticmethod    def assertIn(expect: Any, actual: Any):        """        校验包含        :param expect:        :param actual:        :return:        """        assert expect in actual, f"expect:{expect} not in actual:{actual}"    @staticmethod    def assertNotIn(expect: Any, actual: Any):        """        校验不包含        :param expect:        :param actual:        :return:        """        assert expect not in actual, f"expect:{expect} in actual:{actual}"    @staticmethod    def assertGreater(expect: Any, actual: Any):        """        校验大于        :param expect:        :param actual:        :return:        """        assert int(expect) > int(actual), f"expect:{expect} < actual:{actual}"    @staticmethod    def assertLess(expect: Any, actual: Any):        """        校验大于        :param expect:        :param actual:        :return:        """        assert expect < actual, f"expect:{expect} > actual:{actual}"    @staticmethod    def assertEqualGreater(expect: Any, actual: Any):        """        校验大于等于        :param expect:        :param actual:        :return:        """        assert expect >= actual, f"expect:{expect} <= actual:{actual}"    @staticmethod    def assertEqualLess(expect: Any, actual: Any):        """        校验小于等于        :param expect:        :param actual:        :return:        """        assert expect <= actual, f"expect:{expect} >= actual:{actual}"