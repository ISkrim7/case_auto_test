#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/9/9# @Author : cyq# @File : aioFileReader# @Software: PyCharm# @Desc:import asynciofrom concurrent.futures.thread import ThreadPoolExecutorfrom typing import List, Dict, Anyimport pandas as pdfrom fastapi import UploadFilefrom io import BytesIOfrom utils.threadPool import ThreadPoolHelperTEST_CASE_FIELD_NAMES = ["case_tag", "case_name", "case_setup", "action", "expected_result", "case_level", "case_type"]TEST_CASE_SHEET_NAME = "用例"class AsyncFilesReader:    def __init__(self):        self.tph = ThreadPoolHelper(workers=2)    async def async_read_excel_for_case(self, file: UploadFile):        file = await file.read()        file_bytes = BytesIO(file)        loop = asyncio.get_event_loop()        return await  self.tph.run_in_exe(            loop,            self.__read,            file_bytes        )    @staticmethod    def __read(file: BytesIO) -> (List[Dict[str, Any]], List[str]):        data_rows = []        messages = []        try:            # 使用pandas读取Excel            df = pd.read_excel(file,                               header=1,                               keep_default_na=False,                               na_values=['', 'nan'],                               sheet_name=TEST_CASE_SHEET_NAME)            df = df.where(pd.notnull(df), None)  # 将所有NaN替换为None            for index, row in df.iterrows():                if row.isnull().all():                    continue                row_data = []                for value in row.iloc[:len(TEST_CASE_FIELD_NAMES)]:                    if pd.isna(value):                        row_data.append(None)                    else:                        row_data.append(value)                if pd.isna(row_data[0]) or pd.isna(row_data[5]) or pd.isna(row_data[6]):                    messages.append(f"第{index + 3}行数据不完整")                    continue                data_rows.append(dict(zip(TEST_CASE_FIELD_NAMES, row_data)))        except Exception as e:            messages.append(f"读取Excel时发生错误: {str(e)}")            raise e        return data_rows, messages