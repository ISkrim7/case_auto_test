"""注意：此类已被 VariableTrans 替代，建议在新代码中使用 VariableTrans。此类仅用于向后兼容，将在未来版本中移除。"""import asynciofrom typing import Any, Dict, Listimport refrom common.fakerClient import FakerClientclass Transform:    def __init__(self, variables: dict):        self.variables = variables    async def transform_target(self, target: Any):        """        参数转换        数据转换        """        # 如果单纯字符串        if isinstance(target, str):            return await self._transformStr(target)        # 如果是字典        if isinstance(target, dict):            return await self._transFormObj(target)        # 如果是列表        if isinstance(target, list):            return await self._transFormList(target)        return target    async def _transformStr(self, target: str) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            # todo            # 处理 {{$xx}} 格式变量            extractKey = target[2:-2]            if extractKey.startswith("$"):                extractKey = extractKey[1:]                f = FakerClient()                return f.value(extractKey)            return self.variables.get(extractKey, target)        else:            pattern = r"{{(.*?)}}"            return re.sub(pattern, lambda match: str(self.variables.get(match.group(1), match.group(0))), target)    async def _transFormObj(self, target: Dict[str, Any]) -> Dict[str, Any]:        """        字典替换        :param target        """        return {key: await self.transform_target(value) for key, value in target.items()}    async def _transFormList(self, target: List[Any]) -> List[Any]:        """        列表替换        """        return [await self.transform_target(item) for item in target]class SyncTransForm:    @staticmethod    def transform(target: Any, variables: dict) -> Any:        """静态转换方法"""        # 如果单纯字符串        if isinstance(target, str):            return SyncTransForm._transformStr_sync(target, variables)        # 如果是字典        if isinstance(target, dict):            return SyncTransForm._transFormObj_sync(target, variables)        # 如果是列表        if isinstance(target, list):            return SyncTransForm._transFormList_sync(target, variables)        return target    @staticmethod    def _transformStr_sync(target: str, variables: dict) -> str:        """        字符串替换        """        if target.startswith("{{") and target.endswith("}}"):            # todo            # 处理 {{$xx}} 格式变量            extractKey = target[2:-2]            if extractKey.startswith("$"):                extractKey = extractKey[1:]                f = FakerClient()                return f.value(extractKey)            return variables.get(extractKey, target)        else:            pattern = r"{{(.*?)}}"            return re.sub(pattern, lambda match: str(variables.get(match.group(1), match.group(0))), target)    @staticmethod    def _transFormObj_sync(target: Dict[str, Any], variables: dict) -> Dict[str, Any]:        """        字典替换        :param target        """        return {key: SyncTransForm.transform(value, variables) for key, value in target.items()}    @staticmethod    def _transFormList_sync(target: List[Any], variables: dict) -> List[Any]:        """        列表替换        """        return [SyncTransForm.transform(item, variables) for item in target]def demo():    import asyncio    data = {        "pageNum": 1,        "currPage": 1,        "pageSize": 10,        "pagesize": 10,        "pageIndex": 1,        "pageindex": 1,        "beginCrtDttm": "2025-05-01",        "contractStatus": 2,        "currentPageSize": 10,        "currentpagesize": 10,        "currentPageIndex": 1,        "currentpageindex": 1,        "commissionCollected": "{{commissionCollected}}"    }    v = SyncTransForm.transform(data, {"commissionCollected": "1"})    print(v)if __name__ == '__main__':    demo()