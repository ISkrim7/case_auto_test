#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/14# @Author : cyq# @File : locustUser# @Software: PyCharm# @Desc:import jsonfrom json import JSONDecodeErrorfrom typing import Dict, Callable, Listfrom locust import HttpUser, task, FastHttpUser, betweenfrom app.schema.interface import InterfaceApiSchema, PerfSchemadef create_dynamic_user_class(apiInfo: InterfaceApiSchema, perfSetting: PerfSchema):    """    动态创建 User 类，根据传入的 API 配置生成对应的测试方法    参数:    - apiInfo: API Info    - perfSetting: Perf信息    """    class DynamicApiUser(FastHttpUser):        # 等待时间        wait_time = between(*perfSetting.wait_range)        def __init__(self, environment):            super().__init__(environment)            # 为每个 API 任务动态创建测试方法            setattr(self, f"task_{perfSetting.interfaceId}", self.create_task_method(apiInfo))        def create_task_method(self, apiInfo: InterfaceApiSchema) -> Callable:            """动态创建任务方法"""            def task_method(_self):                with getattr(_self.client, apiInfo.method)(                        apiInfo.url,                        # name=apiInfo.name,  # 用于统计                        catch_response=True,                        **apiInfo.requestInfo                ) as response:                    _self.process_response(response, apiInfo)            # 添加任务装饰器和权重            task_method = task(1)(task_method)            # 复制原始方法的文档字符串等属性            task_method.__doc__ = f"Test {apiInfo.method.upper()} {apiInfo.url}"            return task_method        def process_response(self, response, apiInfo: InterfaceApiSchema):            """处理响应，可被重写"""            custom_validator = apiInfo.get('validator')            try:                if custom_validator:                    # 如果有自定义验证器，使用它                    custom_validator(response)                elif response.status_code >= 400:                    response.failure(f"Status code: {response.status_code}")                else:                    try:                        data = response.json()                        if isinstance(data, dict) and data.get('code', 0) != 0:                            response.failure(f"API returned error: {data}")                        else:                            response.success()                    except json.JSONDecodeError:                        response.success()            except Exception as e:                response.failure(str(e))    return DynamicApiUserclass DynamicApiUser(FastHttpUser):    api_info = {}    method: str    url: str    @task    def invoke(self):        with getattr(self.client, self.method)(self.url, **self.api_info, catch_response=True) as response:            self.verify_response(response, {"code": 0})    def verify_response(self, response, info: Dict):        try:            if response.json().get('code') != 0:                response.failure("code != 0")            else:                response.success()        except JSONDecodeError:            response.failure("Response could not be decoded as JSON")        except KeyError:            response.failure("Response did not contain expected key ")        except Exception as e:            response.failure(e)class DebuggerUser(HttpUser):    api_info = {}    method: str    url: str    @task    def invoke(self):        with getattr(self.client, self.method)(self.url, **self.api_info, catch_response=True) as response:            pass