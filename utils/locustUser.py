#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/14# @Author : cyq# @File : locustUser# @Software: PyCharm# @Desc:import jsonfrom json import JSONDecodeErrorfrom typing import Dict, Callable, Listfrom locust import HttpUser, task, FastHttpUser, betweenfrom app.schema.interface import InterfaceApiSchema, PerfSchemadef create_dynamic_user_class(apiInfo: InterfaceApiSchema, perfSetting: PerfSchema):    """    动态创建 User 类，根据传入的 API 配置生成对应的测试方法    参数:    - apiInfo: API Info    - perfSetting: Perf信息    """    class DynamicApiUser(FastHttpUser):        # 等待时间        wait_time = between(*perfSetting.wait_range)        @task        def dynamic_task(self):            """动态生成的任务方法"""            with getattr(self.client, apiInfo.method.lower())(                apiInfo.url,                name=f"{apiInfo.method} {apiInfo.url}",  # 用于统计                catch_response=True,                **apiInfo.requestInfo            ) as response:                self.process_response(response, apiInfo)        def process_response(self, response, apiInfo: InterfaceApiSchema):            """处理响应，可被重写"""            try:                if response.status_code >= 400:                    response.failure(f"Status code: {response.status_code}")                else:                    try:                        data = response.json()                        if isinstance(data, dict) and data.get('code', 0) != 0:                            response.failure(f"API returned error: {data}")                        else:                            response.success()                    except json.JSONDecodeError:                        response.success()            except Exception as e:                response.failure(str(e))    return DynamicApiUserclass DynamicApiUser(FastHttpUser):    api_info = {}    method: str    url: str    @task    def invoke(self):        with getattr(self.client, self.method)(self.url, **self.api_info, catch_response=True) as response:            self.verify_response(response, {"code": 0})    def verify_response(self, response, info: Dict):        try:            if response.json().get('code') != 0:                response.failure("code != 0")            else:                response.success()        except JSONDecodeError:            response.failure("Response could not be decoded as JSON")        except KeyError:            response.failure("Response did not contain expected key ")        except Exception as e:            response.failure(e)class DebuggerUser(HttpUser):    api_info = {}    method: str    url: str    @task    def invoke(self):        with getattr(self.client, self.method)(self.url, **self.api_info, catch_response=True) as response:            pass