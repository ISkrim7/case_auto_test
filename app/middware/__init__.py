#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/7# @Author : cyq# @File : __init__.py# @Software: PyCharm# @Desc:import typingfrom app.exception import AuthError, NotFind, SQLAlchemyErrorHandler, UIRuntimeError, ParamsError, CommonErrorfrom starlette.responses import Responsefrom utils import MyLogurufrom fastapi.responses import JSONResponsefrom fastapi.encoders import jsonable_encoderfrom fastapi import status, Requestfrom fastapi.exceptions import RequestValidationErrorfrom utils import logfrom enums import HttpCodeEnumLOG = MyLoguru().get_logger()RequestResponseEndpoint = typing.Callable[[Request], typing.Awaitable[Response]]CORS_ALLOW_ORIGINS = {    "allow_origins": ['*'],    "allow_credentials": True,    "allow_methods": ['*'],    "allow_headers": ['*'],}async def req_middleware(request: Request, call_next: RequestResponseEndpoint):    """    请求中间件    :param request:    :param call_next:    :return:    """    LOG.info(f">> {request.method} : {request.url}")    LOG.info(f">> {request.client.host}")    return await call_next(request)async def error_middleware(_: Request, exc: Exception):    """    异常中间件    :param _:    :param exc:    :return:    """    if isinstance(exc, (AuthError,                        NotFind,                        SQLAlchemyErrorHandler,                        CommonError                        )):        return exc.add_raise()    elif isinstance(exc, (            ParamsError,            UIRuntimeError,    )):        raise exc    else:        return JSONResponse(            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,            content=dict(code=HttpCodeEnum.SERVICE_ERROR,                         data=None,                         msg="service error"),        )async def validation_exception_handler(_: Request, exc: RequestValidationError):    """    处理请求验证异常的异步函数。    当请求中的数据不符合预期格式时，FastAPI的请求验证器可能会抛出RequestValidationError异常。    本函数旨在捕获这类异常，并返回一个标准化的错误响应，以告知客户端请求数据存在问题。    :param _: 发生验证错误的请求对象    :param exc: 抛出的验证错误异常实例    :return: JSONResponse    """    return JSONResponse(        status_code=status.HTTP_200_OK,        content=jsonable_encoder({            "code": HttpCodeEnum.PARAMS_VALIDA_ERROR,            "data": None,            "msg": validationMsg(exc),        })    )def validationMsg(exc: RequestValidationError) -> str:    excInfo = exc.errors()[0]    log.info(excInfo)    _type = excInfo.get("type")    _param = excInfo.get("loc")[-1]    _msg = excInfo.get("msg")    if "missing" in _type:        return "miss field:" + _param    elif "type_error" in _type:        return f"{_msg} : {_param}"    elif "value_error" in _type:        return f"{_msg} : {_param}"    return "参数解析失败"