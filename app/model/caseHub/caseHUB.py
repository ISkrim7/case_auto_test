#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/8/25# @Author : cyq# @File : caseHUB# @Software: PyCharm# @Desc:from sqlalchemy import Column, ForeignKey, String, Boolean, Integer, JSONfrom app.model.base import Userfrom app.model.basic import BaseModelclass Requirement(BaseModel):    __tablename__ = "requirement"    module_id = Column(Integer, nullable=True, comment="所属模块")    project_id = Column(Integer, ForeignKey("project.id"), nullable=True,                        comment="所属项目")    requirement_url = Column(String(500), nullable=True, comment="需求链接")    requirement_name = Column(String(500), nullable=True, comment="需求名")    requirement_level = Column(String(5), nullable=True, comment="需求等级 P1 P2 P0")    process = Column(Integer, default=5,                     comment="用例进度  1'二轮测试' | 2'一轮测试中' |3'待测试' | 4'完成' | 5'编写中';")    develops = Column(JSON, nullable=True, comment="开发人员")    maintainer = Column(Integer, nullable=True, comment="测试人员")    case_number = Column(Integer, default=0, comment="关联用例数量")    def __repr__(self):        return f"<CaseHUB(id={self.id},requirement_name={self.requirement_name}) >"class TestCase(BaseModel):    __tablename__ = "test_case"    case_name = Column(String(500), nullable=False, comment="用例步骤名称")    case_level = Column(String(5), nullable=False, comment="用例步骤等级 P1 P2 P0")    case_type = Column(Integer, default=1, comment="用例步骤类型 1'普通' | 2'冒烟' | 3 回归")    case_tag = Column(String(100), nullable=True, comment="用例步骤标签")    case_setup = Column(String(500), nullable=True, comment="用例步骤前置条件")    case_status = Column(Integer, default=1, comment="用例步骤状态  0 | 1 | 2; // 0:未开始 1:通过 2:失败")    case_mark = Column(String(500), nullable=True, comment="用例步骤备注")    is_review = Column(Boolean, default=False, comment="是否审核")    is_common = Column(Boolean, default=False, comment="用例库")    # **关键外键**    module_id = Column(Integer, ForeignKey('module.id'), nullable=False, comment="所属模块")    project_id = Column(Integer, ForeignKey('project.id'), nullable=False, comment="所属项目")    async def set_default(self, user: User):        self.case_name = "测试用例"        self.case_level = "P2"        self.case_type = 1        self.case_status = 0        self.creator = user.id        self.creatorName = user.username    def __repr__(self):        return f"<TestCase(id={self.id},case_name={self.case_name}) >"class CaseStepDynamic(BaseModel):    __tablename__ = "case_dynamic"    test_case_id = Column(Integer, ForeignKey("test_case.id", ondelete='cascade'), nullable=False, primary_key=True,                          comment="用例步骤id")    description = Column(String(500), nullable=False, comment="动态描述")    def __repr__(self):        return f"<CaseStepDynamic(id={self.id},description={self.description}) >"class TestCaseStep(BaseModel):    __tablename__ = "case_sub_step"    test_case_id = Column(Integer, ForeignKey("test_case.id", ondelete="cascade"), nullable=False, primary_key=True,                          comment="用例步骤id")    action = Column(String(500), nullable=True, comment="执行")    expected_result = Column(String(500), nullable=True, comment="预期")    order = Column(Integer, nullable=False, comment="排序")    def __repr__(self):        return f"<TestCaseStep(id={self.id},do={self.action}) >"