#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : user# @Software: PyCharm# @Desc:from sqlalchemy import Column, INTEGER, String, Boolean, ForeignKeyfrom sqlalchemy.orm import Mapped, mapped_columnfrom app.model.basic import BaseModelfrom enums import GenderEnumclass UserTag(BaseModel):    __tablename__ = "userTag"    name: Mapped[str] = Column(String(20), unique=True, comment="标签名称")    departmentID: Mapped[int] = Column(INTEGER,                                       ForeignKey("department.id", ondelete="CASCADE"),                                       nullable=True,                                       comment="所属部门")    def __repr__(self):        return f"<{UserTag.__name__} {self.name}>"class UserDepartment(BaseModel):    __tablename__ = "department"    name: Mapped[str] = Column(String(20), unique=True, comment="用户名")    desc: Mapped[str | None] = Column(String(40), nullable=True, comment="部门描述")    adminID: Mapped[int | None] = Column(INTEGER, nullable=True, comment="部门负责人")    adminName: Mapped[str | None] = Column(String(10), nullable=True, comment="部门负责人名称")    def __repr__(self):        return f"<{UserDepartment.__name__} {self.name}>"class User(BaseModel):    __tablename__ = "user"    username: Mapped[str] = mapped_column(String(20), comment="用户名")    phone: Mapped[str] = mapped_column(String(12), unique=True, comment="手机")    password: Mapped[str] = mapped_column(String(200), comment="密码")    email: Mapped[str] = mapped_column(String(50), unique=True, comment="邮箱")    gender: Mapped[GenderEnum] = mapped_column(String(10), comment="性别")    avatar: Mapped[str] = mapped_column(String(400), nullable=True, comment="头像")    isAdmin: Mapped[bool] = mapped_column(Boolean, default=False, comment="管理")    tagName: Mapped[str] = mapped_column(String(20), nullable=True, comment="对应标签名称")    departmentID: Mapped[int | None] = mapped_column(ForeignKey("department.id", ondelete="SET NULL"),                                                     nullable=True,                                                     comment="所属部门ID")    departmentName: Mapped[str | None] = mapped_column(String(20),                                                       nullable=True,                                                       comment="对应标签名称")    @property    def userInfo(self):        return {            "username": self.username,            "phone": self.phone,            "email": self.email,            "avatar": self.avatar        }    def __repr__(self):        return f"<{User.__name__}  id={self.id}  username={self.username} isAdmin={self.isAdmin}>"class UserVars(BaseModel):    """用户全局变量"""    __tablename__ = 'user_vars'    key = Column(String(40), nullable=False, unique=True, comment="key")    value = Column(String(500), nullable=False, comment="value")    description = Column(String(100), nullable=True, comment="描述")    user_id = Column(INTEGER, ForeignKey('user.id', ondelete="cascade"),                     nullable=False, comment="所属用户")    user_name = Column(String(40), nullable=False, comment="用户名")    def __repr__(self):        return (            f"<UserVars(key='{self.key}', value='{self.value}' userName={self.user_name})>"        )