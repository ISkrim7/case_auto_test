#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/2# @Author : cyq# @File : playStep# @Software: PyCharm# @Desc:from sqlalchemy import Column, String, BOOLEAN, ForeignKey, INTEGER, JSONfrom sqlalchemy.orm import relationshipfrom app.model import BaseModelclass PlayStep(BaseModel):    """    ui case step 模型    """    __tablename__ = "play_step"    name = Column(String(40), nullable=False, comment="步骤名称")    description = Column(String(40), nullable=False, comment="步骤描述")    method = Column(String(40), nullable=True, comment="步骤方法")    locator = Column(String(100), nullable=True, comment="步骤元素定位器")    fill_value = Column(String(100), nullable=True, comment="输入的值")    iframe_name = Column(String(100), nullable=True, comment="是否是iframe")    new_page = Column(BOOLEAN, default=False, comment="是否打开新页面")    is_common_step = Column(BOOLEAN, default=False, comment="是否是公共步骤")    is_ignore = Column(BOOLEAN, default=False, comment="忽略异常")    # api    interface_id = Column(INTEGER, nullable=True, comment="接口请求")    interface_a_or_b = Column(INTEGER, nullable=True, comment="接口请求是前置 1 还是后置 0 执行")    interface_fail_stop = Column(INTEGER, nullable=True, default=1, comment="是否失败停止 1 是 0否")    module_id = Column(INTEGER, nullable=True, comment="所属模块")    project_id = Column(INTEGER, ForeignKey("project.id", ondelete="set null"), nullable=True, comment="所属项目")    # db    db_id = Column(INTEGER, nullable=True, comment="数据库ID")    sql_script = Column(String(500), nullable=True, comment="执行的sql")    db_a_or_b = Column(INTEGER, nullable=True, comment="SQL执行是前置 1 还是后置 0 执行")    # group 当此step 为组的属性    is_group = Column(BOOLEAN, default=False, comment="是否是组")    step_num = Column(INTEGER, nullable=True, comment="组内步骤数量")    # 当step为组的子步骤属性    group_id = Column(INTEGER, nullable=True, comment="所属组id")    step_order = Column(INTEGER, nullable=True, comment="组内步骤顺序")    # if  condition    condition = Column(JSON, nullable=True, comment="条件语句")    step_condition_id = Column(INTEGER, nullable=True, comment="条件步骤id")    step_condition_order = Column(INTEGER, nullable=True, comment="条件步骤顺序")    # 定义反向关系    case_associations = relationship(        "PlayCaseStepAssociation",        back_populates="play_step",        cascade="all, delete-orphan"    )    @property    def desc(self):        if len(self.description) > 10:            return self.description[:10] + "..."        return self.description    def __repr__(self):        return f"<Step (name='{self.name}'  description='{self.desc}' method={self.method})>"