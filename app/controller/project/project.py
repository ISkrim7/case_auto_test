#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/20# @Author : cyq# @File : project# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.mapper.project import ProjectMapper, GlobalVariableMapperfrom app.mapper.project.env import EnvMapperfrom app.schema.base import InsertProjectSchema, PageProjectSchema, UpdateProjectSchemafrom app.schema.base.env import InsertEnvSchema, UpdateEnvSchema, PageEnvSchema, DeleteEnvSchema, FilterByEnvSchema, \    EnvFieldfrom app.schema.interface import AddGlobalSchema, PageGlobalSchema, SetGlobalSchema, UpdateGlobalSchemafrom common import get_redisrouter = APIRouter(prefix="/project", tags=["项目"])@router.post("/insert_variable", description="添加全局变量")async def insert_variable(info: AddGlobalSchema, cr: User = Depends(Authentication())):    g = await GlobalVariableMapper.save(        creatorUser=cr,        **info.model_dump()    )    return Response.success(g)@router.post("/page_variable", description="分页 变量")async def page_variable(info: PageGlobalSchema, _: User = Depends(Authentication())):    data = await GlobalVariableMapper.page_query(**info.model_dump(exclude_unset=True, exclude_none=True))    return Response.success(data)@router.get("/query_variable", description="全部变量")async def query_variable(_: User = Depends(Authentication())):    data = await GlobalVariableMapper.query_all()    return Response.success(data)@router.post("/remove_variable", description="删除变量")async def remove_variable(info: SetGlobalSchema, _: User = Depends(Authentication())):    await GlobalVariableMapper.delete_by_uid(info.uid)    return Response.success()@router.post("/update_variable", description="更新全局变量")async def update_variable(info: UpdateGlobalSchema, ur: User = Depends(Authentication())):    await GlobalVariableMapper.update_by_uid(        updateUser=ur,        **info.model_dump()    )    return Response.success()@router.get("/query", description="查询所有项目")async def query_project(_: User = Depends(Authentication()),                        # rc=Depends(get_redis)                        ):    """    查询所有项目    :return:    """    # try:    #     data = await rc.cache_with_key("projects", ProjectMapper.query_all)    #     return Response.success(data)    # except Exception as e:    #     pass    data = await ProjectMapper.query_all()    return Response.success(data)@router.post("/page", description="分页")async def page_project(pageInfo: PageProjectSchema, _=Depends(Authentication())):    info = await ProjectMapper.page_query(**pageInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(info)@router.post('/insert', description="添加项目")async def insert_project(project: InsertProjectSchema,                         auth=Depends(Authentication(isAdmin=True))):    await ProjectMapper.insert_project(        **project.model_dump(),        creatorUser=auth    )    return Response.success()@router.post('/update', description="修改项目")async def update_project(project: UpdateProjectSchema,                         auth=Depends(Authentication(isAdmin=True))):    await ProjectMapper.update_by_uid(        **project.model_dump(            exclude_unset=True,            exclude_none=True        ),        updateUser=auth    )    return Response.success()@router.post('/delete', description="删除项目")async def delete_project(project: UpdateProjectSchema,                         _=Depends(Authentication(isAdmin=True))):    await ProjectMapper.delete_by_id(        **project.model_dump(            exclude_unset=True,            exclude_none=True        )    )    return Response.success()@router.post("/env/insert", description="添加环境")async def insert_env(env: InsertEnvSchema, auth=Depends(Authentication())):    await EnvMapper.save(        **env.model_dump(),        creatorUser=auth    )    return Response.success()@router.post("/env/update", description="添加环境")async def insert_env(env: UpdateEnvSchema, auth=Depends(Authentication())):    await EnvMapper.update_by_id(        **env.model_dump(),        updateUser=auth    )    return Response.success()@router.get("/env/queryBy", description="查询环境")async def query_env_by(env: FilterByEnvSchema = Depends(), _=Depends(Authentication())):    envs = await EnvMapper.query_by(**env.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(envs)@router.get("/env/detail", description="查询环境")async def get_env_by_id(env: EnvField = Depends(), _=Depends(Authentication())):    env = await EnvMapper.get_by_id(ident=env.id)    return Response.success(env)@router.get("/env/query", description="查询所有环境")async def query_env_by(_=Depends(Authentication())):    envs = await EnvMapper.query_all()    return Response.success(envs)@router.post("/env/page", description="环境分页")async def page_env(pageInfo: PageEnvSchema, _=Depends(Authentication())):    envs = await EnvMapper.page_query(**pageInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(envs)@router.post("/env/remove", description="删除环境")async def remove_env(env: DeleteEnvSchema, _=Depends(Authentication())):    await EnvMapper.delete_by_id(ident=env.id)    return Response.success()