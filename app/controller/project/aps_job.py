#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/4/8# @Author : cyq# @File : aps_job# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsimport configfrom app.controller import Authenticationfrom app.mapper.ui.uiTaskMapper import UITaskMapperfrom app.mapper.interface.interfaceTaskMapper import InterfaceTaskMapperfrom app.model.base import Userfrom app.response import Responsefrom app.scheduler.aps.scheduler import get_schedulerfrom app.schema.base import ApsSwitchSchemafrom utils import logrouter = APIRouter(prefix="/aps/job", tags=['自动化任务'])@router.get("/list", description="任务列表")async def query_job(_: User = Depends(Authentication()), scheduler=Depends(get_scheduler)):    jobs = await scheduler.get_all_jobs()    log.info(jobs)    tasks = []    ui_job_ids = []    api_job_ids = []    for job in jobs:        if job.id.startswith("UI_"):            ui_job_ids.append(job.id.split("UI_")[-1])        elif job.id.startswith("API_"):            api_job_ids.append(job.id.split("API_")[-1])        else:            continue    api_tasks = await InterfaceTaskMapper.query_by_in_clause(target="uid", list_=api_job_ids)    ui_tasks = await UITaskMapper.query_by_in_clause(target="uid", list_=ui_job_ids)    for at in api_tasks:        t = await scheduler.job_next_run_time(f"API_{at.uid}")        tasks.append({**at.to_dict(), "next": t, "tag": "API"})    for ut in ui_tasks:        t = await scheduler.job_next_run_time(f"UI_{ut.uid}")        tasks.append({**ut.to_dict(), "next": t, "tag": "UI"})    return Response.success(tasks)@router.post('/set_switch', description="开关任务")async def set_switch(data: ApsSwitchSchema, _: User = Depends(Authentication()), scheduler=Depends(get_scheduler)):    job_id = f"{data.tag}_{data.uid}"    if data.tag == "UI":        await UITaskMapper.update_by_uid(updateUser=_, **{"uid": data.uid, "is_auto": data.switch})    else:        await InterfaceTaskMapper.update_by_uid(updateUser=_, **{"uid": data.uid, "switch": data.switch})    await scheduler.set_switch(job_id, data.switch)    return Response.success()# @router.get("/jobText/start")# async def start(name):#     from play.debugger import Tester#     tests = asyncio.create_task(Tester().run_task(1, 2), name=name)#     return Response.success()## @router.get("/jobText/stop")# async def stop(name):#     tasks = asyncio.all_tasks()#     for t in tasks:#         if t.get_name() == name:#             t.cancel()#             # 等待任务取消完成#             try:#                 await t#             except asyncio.CancelledError:#                 print("Task was cancelled and has finished")#     return Response.success()