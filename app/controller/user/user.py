#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : user# @Software: PyCharm# @Desc:from fastapi import APIRouter, Depends, UploadFile, Filefrom app.mapper.user import UserMapper, UserVarsMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema import PageSchemafrom app.schema.base import RegisterUser, RegisterAdmin, LoginUser, PublicRegisterUserfrom app.schema.base.user import *from app.controller import Authenticationfrom utils import MyLoguru, logfrom utils.fileManager import FileManagerLOG = MyLoguru().get_logger()router = APIRouter(prefix="/user", tags=["用户"])UserExclude = {"password", }@router.post(path="/pageUser", description="分页查询用户")async def page_user(page: PageSchema, _: User = Depends(Authentication())):    """    分页查询用户    :param page:分页信息    :param _:鉴权    :return:    """    data = await UserMapper.page_query(**page.model_dump())    return Response.success(data, exclude=UserExclude)@router.post("/updatePwd", description="修改密码")async def update_pwd(pwdInfo: PasswordUserSchema, _: User = Depends(Authentication())):    """    修改密码    :param pwdInfo:    :param _:    :return:    """    # await UserMapper.update_pwd(user.id, pwd)    return Response.success()@router.get(path="/query", description="查询所有用户")async def query_user(_=Depends(Authentication(isAdmin=True))):    """    查询所有用户    """    users = await UserMapper.query_all()    return Response.success(users, exclude=UserExclude)@router.get(path='/query_by_username', description="查询用户")async def query_by_username(username: str | None, _=Depends(Authentication(isAdmin=True))):    """    通过用户名 模糊搜索    :param username:    :param _:    :return:    """    if username is None:        return Response.success([])    users = await UserMapper.filter_user_by_username(username)    return Response.success(users, exclude=UserExclude)@router.get(path="/currentUser", description="获取当前用户信息")async def current_user_info(user=Depends(Authentication())):    """通过userID 获取用户信息"""    return Response.success(user, exclude={"password"})@router.post(path="/registerUser",             description="注册用户")async def register_user(user: RegisterUser, _=Depends(Authentication(isAdmin=True))):    await UserMapper.register(**user.model_dump(        exclude_none=True,        exclude_unset=True    ))    return Response.success()@router.post(path="/registerAdmin", description="添加管理")async def register_admin(user: RegisterAdmin):    await UserMapper.register_admin(**user.model_dump())    return Response.success()@router.post(path="/public/register", description="用户公开注册")async def public_register(user: PublicRegisterUser):    """独立公开注册接口"""    await UserMapper.public_register(**user.model_dump())    return Response.success()@router.post(path="/remove", description="用户删除")async def remove_user(user: UserOptSchema, _: User = Depends(Authentication(isAdmin=True))):    await UserMapper.delete_by_id(user.userId)    return Response.success()@router.post(path="/update", description="用户删除")async def update_user(user: UpdateUserSchema, _: User = Depends(Authentication(isAdmin=True))):    await UserMapper.update_by_id(**user.model_dump())    return Response.success()@router.post(path="/login", description="登陆")async def login(loginInfo: LoginUser):    token = await UserMapper.login(**loginInfo.model_dump())    log.debug(token)    return Response.success(token)@router.post(path="/uploadAvatar", description="上传头像")async def upload_avatar(avatar: UploadFile = File(...), user: User = Depends(Authentication())):    await FileManager.save_avatar(avatar, user)    return Response.success()@router.post(path='/page_vars', description="我的变量")async def page_vars(page: PageSchema, user: User = Depends(Authentication())):    data = await UserVarsMapper.page_query(**page.model_dump(        exclude_none=True,    ), user_id=user.id)    return Response.success(data)@router.get(path='/query_vars', description="我的变量")async def query_vars(user: User = Depends(Authentication())):    data = await UserVarsMapper.query_by(user_id=user.id)    return Response.success(data)@router.post("/add_or_update_vars", description="添加或更新变量")async def add_or_update_vars(var_info: AddOrUpdateUserVars, user: User = Depends(Authentication())):    var = await UserVarsMapper.add_or_update(user=user, varInfo=var_info)    return Response.success(var)