#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/3# @Author : cyq# @File : play_step# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.schema.play import InsertPlayStepSchema, UpdatePlayStepSchema, RemovePlayStepSchema, PagePlayStepSchema, \    CopyPlayStepSchema, AssociationStepApiSchema, GetPlaySubStepByIdSchema, InsertPlayConditionStepSchema, \    ReorderPlayConditionStepsSchemafrom app.mapper.play.playCaseMapper import PlayCaseMapperfrom app.mapper.play.playStepMapper import PlayStepMapperfrom utils import logrouter = APIRouter(prefix="/play/step", tags=['自动化用例'])@router.post("/insert", description="插入步骤")async def add_common_step(stepInfo: InsertPlayStepSchema, cr: User = Depends(Authentication())):    # 新增用例并关联case    if stepInfo.caseId and stepInfo.is_common_step is False:        await PlayCaseMapper.insert_step(**stepInfo.model_dump(exclude_unset=True,                                                               exclude_none=True),                                         cr=cr)    else:        # 新增common step        await PlayStepMapper.save(            creatorUser=cr,            **stepInfo.model_dump(                exclude_none=True,                exclude_unset=True            ))    return Response.success()@router.get("/detail", description="步骤详情")async def step_detail(stepId: int, _: User = Depends(Authentication())):    data = await PlayStepMapper.get_by_id(ident=stepId)    return Response.success(data)@router.post("/update", description="修改步骤")async def update_step(stepInfo: UpdatePlayStepSchema, ur: User = Depends(Authentication())):    await PlayStepMapper.update_by_id(        updateUser=ur,        **stepInfo.model_dump(            exclude_none=True,            exclude_unset=True        ))    return Response.success()@router.post("/page", description="分页")async def page_step(pageInfo: PagePlayStepSchema, _: User = Depends(Authentication())):    data = await PlayStepMapper.page_by_module(**pageInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(data)@router.post("/copy", description="step 复制")async def copt_step(step: CopyPlayStepSchema, cr: User = Depends(Authentication())):    data = await PlayStepMapper.copy_step(stepId=step.stepId, cr=cr,                                          copy_step_name=False,                                          is_common=step.is_common_step)    log.info(data)    return Response.success(data)@router.get("/getAssociationCases", description="获取关联用例")async def get_association_cases(stepId: int, _: User = Depends(Authentication())):    data = await PlayStepMapper.query_case_by_step_id(stepId)    return Response.success(data)@router.post("/associationAPI", description="关联API步骤")async def association_api(ass: AssociationStepApiSchema, _: User = Depends(Authentication())):    await PlayStepMapper.association_api(**ass.model_dump())    return Response.success()@router.post("/removeAssociationAPI", description="移除关联API步骤")async def remove_association_api(ass: GetPlaySubStepByIdSchema, _: User = Depends(Authentication())):    await PlayStepMapper.remove_association_api(**ass.model_dump())    return Response.success()@router.post("/removeAssociationDB", description="移除关联DB步骤")async def remove_association_db(ass: GetPlaySubStepByIdSchema, _: User = Depends(Authentication())):    await PlayStepMapper.remove_association_db(**ass.model_dump())    return Response.success()@router.post("/removeCondition", description="移除关联DB步骤")async def remove_condition(ass: GetPlaySubStepByIdSchema, _: User = Depends(Authentication())):    await PlayStepMapper.remove_condition(**ass.model_dump())    return Response.success()@router.post('/queryConditionSteps', description="查询关联条件步骤")async def query_condition_steps(step: GetPlaySubStepByIdSchema, _: User = Depends(Authentication())):    data = await PlayStepMapper.query_condition(**step.model_dump())    return Response.success(data)@router.post("/insertConditionStep", description="插入关联条件步骤")async def insert_condition_step(info: InsertPlayConditionStepSchema, _: User = Depends(Authentication())):    await PlayStepMapper.insert_condition_step(**info.model_dump())    return Response.success()@router.post("/reorderConditionStep", description="插入关联条件步骤")async def reorder_condition_step(info: ReorderPlayConditionStepsSchema, _: User = Depends(Authentication())):    await PlayStepMapper.reorder_condition_steps(**info.model_dump())    return Response.success()