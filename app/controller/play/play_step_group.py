#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/8# @Author : cyq# @File : play_step_group# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.play import PlayStepMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema.play import InsertPlayStepGroupSchema, PagePlayStepGroupSchema, InsertPlaySubStepSchema, \    ReOrderPlaySubStepsSchema, GetPlaySubStepByIdSchema, UpdatePlayStepGroupSchema, RemovePlayStepGroupSchemarouter = APIRouter(prefix="/play/stepGroup", tags=['自动化用例组'])@router.post("/insert", description="插入组")async def insert_group(group: InsertPlayStepGroupSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.save(**group.model_dump(), creatorUser=cr)    return Response.success()@router.post("/update", description="修改组")async def update_group(group: UpdatePlayStepGroupSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.update_by_id(**group.model_dump(), updateUser=cr)    return Response.success()@router.post("/remove", description="删除组")async def remove_group(group: RemovePlayStepGroupSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.update_by_id(**group.model_dump(), updateUser=cr)    return Response.success()@router.post("/page", description="分页")async def page_step(pageInfo: PagePlayStepGroupSchema, _: User = Depends(Authentication())):    data = await PlayStepMapper.page_by_module(**pageInfo.model_dump(        exclude_unset=True,        exclude_none=True    ))    return Response.success(data)@router.get("/querySteps", description="查询步骤")async def query_sub_steps(groupId: int, _: User = Depends(Authentication())):    data = await PlayStepMapper.query_steps_by_groupId(groupId)    return Response.success(data)@router.post("/insertStep", description="插入字步骤")async def insert_sub_step(step: InsertPlaySubStepSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.insert_sub_step(**step.model_dump(), cr=cr)    return Response.success()@router.post("/copyStep", description="复制子步骤")async def copy_sub_step(step: GetPlaySubStepByIdSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.copy_sub_step(**step.model_dump(), cr=cr)    return Response.success()@router.post("/removeStep", description="删除子步骤")async def remove_sub_step(step: GetPlaySubStepByIdSchema, cr: User = Depends(Authentication())):    await PlayStepMapper.remove_sub_step(**step.model_dump())    return Response.success()@router.post("/reorderSteps", description="调整子步骤")async def reorder_sub_step(step: ReOrderPlaySubStepsSchema, _: User = Depends(Authentication())):    await PlayStepMapper.reorder_sub_step(**step.model_dump())    return Response.success()