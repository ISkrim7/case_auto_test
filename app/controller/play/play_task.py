#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/23# @Author : cyq# @File : play_task# @Software: PyCharm# @Desc:import asynciofrom fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.play import PlayCaseResultMapperfrom app.model.base import Userfrom app.model.playUI import PlayTaskfrom app.response import Responsefrom app.scheduler.aps.scheduler import TaskScheduler, get_schedulerfrom app.schema.play.playTaskSchema import *from app.mapper.play.playTaskMapper import PlayTaskMapper, PlayTaskResultMapperfrom play.starter import UIStarterfrom utils import logrouter = APIRouter(prefix="/play/task", tags=['自动化任务'])@router.get("/basicDetail", description="任务信息")async def taskDetail(taskId: int, _: User = Depends(Authentication())):    """    获取任务信息    :param taskId:    :param _:user    :return:    """    data = await PlayTaskMapper.get_by_id(ident=taskId)    return Response.success(data)@router.get("/queryAssociationCase", description="查询用例")async def queryAssociationCase(taskId: int, _: User = Depends(Authentication())):    """    获取任务信息    :param taskId:    :param _:user    :return:    """    data = await PlayTaskMapper.query_case(taskId)    return Response.success(data)@router.post("/insertAssociationCase", description="添加关联用例")async def insertAssociationCase(assInfo: PlayAssociationCase, _: User = Depends(Authentication())):    await PlayTaskMapper.association_cases(**assInfo.model_dump())    return Response.success()@router.post("/removeAssociationCase", description="移除关联用例")async def removeAssociationCase(assInfo: PlayRemoveAssociationCase, _: User = Depends(Authentication())):    await PlayTaskMapper.remove_association_case(**assInfo.model_dump())    return Response.success()@router.post("/reorderAssociationCase", description="关联用例执行排序")async def reorderAssociationCase(assInfo: PlayAssociationCase, _: User = Depends(Authentication())):    await PlayTaskMapper.reorder_association_case(**assInfo.model_dump())    return Response.success()@router.post("/page", description="任务分页")async def pageTask(pageInfo: PagePlayTaskSchema, _: User = Depends(Authentication())):    data = await PlayTaskMapper.page_by_module(**pageInfo.model_dump(        exclude_none=True    ))    return Response.success(data)@router.post("/insertTask", description="添加任务")async def insert_task(taskInfo: InsertPlayTaskSchema,                      cu: User = Depends(Authentication()),                      scheduler: TaskScheduler = Depends(get_scheduler)):    # 同步更新    if taskInfo.is_auto is True:        taskInfo.switch = True    else:        taskInfo.switch = False    task = await PlayTaskMapper.save(**taskInfo.model_dump(), creatorUser=cu)    await scheduler.modify_task(task)    return Response.success(task)@router.post("/updateTask", description="更新任务")async def update_task(taskInfo: UpdatePlayTaskSchema,                      uu: User = Depends(Authentication()),                      scheduler: TaskScheduler = Depends(get_scheduler)):    # 同步更新    if taskInfo.is_auto is True:        taskInfo.switch = True    else:        taskInfo.switch = False    task: PlayTask = await PlayTaskMapper.update_by_id(**taskInfo.model_dump(        exclude_none=True    ), updateUser=uu)    await scheduler.modify_task(task)    return Response.success(task)@router.post("/removeTask", description="添加任务")async def remove_task(taskInfo: GetPlayTaskByIDSchema,                      __: User = Depends(Authentication()),                      scheduler: TaskScheduler = Depends(get_scheduler)):    await PlayTaskMapper.remove_task(taskId=taskInfo.taskId, scheduler=scheduler)    return Response.success()@router.post("/handleExecute", description="添加任务")async def handleExecute(taskInfo: GetPlayTaskByIDSchema, user: User = Depends(Authentication())):    from play.playTaskRunner import PlayTaskRunner    try:        asyncio.create_task(            PlayTaskRunner(starter=UIStarter(user)).execute_task(taskId=taskInfo.taskId)        )    except Exception as e:        log.exception(e)    return Response.success()# @router.post("/executeJenkins", description="jenkins执行任务")# async def runTaskByJenkins(data: RunUITaskByJK):#     asyncio.create_task(run_Tasks(**data.model_dump()))#     return Response.success()@router.post("/baseReport/page", description="任务报告分页")async def pageTaskReport(pageInfo: PlayPageTaskReportSchema, _: User = Depends(Authentication())):    """    任务报告分页    :param pageInfo:    :param _:    :return:    """    data = await PlayTaskResultMapper.page_query(**pageInfo.model_dump(exclude_none=True, exclude_unset=True))    return Response.success(data)@router.get("/resultDetail", description="任务报告")async def resultDetail(resultId: int, _: User = Depends(Authentication())):    """    任务报告分页    :param resultId:    :param _:    :return:    """    data = await PlayTaskResultMapper.get_by_id(ident=resultId)    return Response.success(data)@router.get("/removeTaskResult", description="任务报告")async def removeTaskResult(resultId: str, _: User = Depends(Authentication())):    """    任务报告分页    :param resultId:    :param _:    :return:    """    data = await PlayTaskResultMapper.delete_by_uid(uid=resultId)    return Response.success(data)@router.get("/queryCaseResultByTaskId", description="任务报告")async def queryCaseResultByTaskId(resultId: int, _: User = Depends(Authentication())):    """    任务报告    :param resultId:    :param _:    :return:    """    data = await PlayCaseResultMapper.query_by(task_result_id=resultId)    return Response.success(data)@router.get("/getTaskJobNextRunTime", description="获取下次执行时间")async def getTaskJobNextRunTime(jobId: str, _: User = Depends(Authentication()),                                scheduler: TaskScheduler = Depends(get_scheduler)):    """    任务报告    :param jobId:    :param scheduler:    :param _:    :return:    """    data = await scheduler.job_next_run_time(f"UI_{jobId}")    return Response.success(data)