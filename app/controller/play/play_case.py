#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/3# @Author : cyq# @File : play_case# @Software: PyCharm# @Desc:from asyncio import create_taskfrom fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.play import PlayCaseVariablesMapperfrom app.mapper.play.playStepMapper import PlayStepMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema.play import (    PlayCaseBasicSchema,    EditPlayCaseBasicSchema,    GetPlayCaseByCaseId,    PagePlayCaseSchema,    ReOrderPlayStepSchema,    RemovePlayStepSchema,    CopyPlayCaseStepSchema,    PlayCaseChoiceStepSchema,    PagePlayCaseResultSchema, InsertPlayCaseVariableSchema, GetPlayCaseVariableSchema, PagePlayCaseVariableSchema,    EditPlayCaseVariableSchema, PlayCaseChoiceGroupStepSchema)from app.mapper.play.playCaseMapper import PlayCaseMapper, PlayCaseResultMapperfrom play.player import Playerfrom play.starter import UIStarterfrom utils import logrouter = APIRouter(prefix="/play/case", tags=['自动化用例'])@router.get("/detail", description="用例基本信息")async def case_detail(case: GetPlayCaseByCaseId = Depends(), _: User = Depends(Authentication())):    case = await PlayCaseMapper.get_by_id(case.caseId)    return Response.success(case)@router.post("/insert/basic", description="添加用例基本信息")async def insert_case_basic(case: PlayCaseBasicSchema, cr: User = Depends(Authentication())):    play_case = await PlayCaseMapper.save(creatorUser=cr, **case.model_dump())    return Response.success(play_case)@router.post("/edit/basic", description="修改用例基本信息")async def edit_case(case: EditPlayCaseBasicSchema, ur: User = Depends(Authentication())):    case = await PlayCaseMapper.update_by_id(        updateUser=ur,        **case.model_dump(exclude_none=True, exclude_unset=True))    return Response.success(case)@router.post("/delete", description="删除用例")async def delete_case(case: GetPlayCaseByCaseId, _: User = Depends(Authentication())):    await PlayCaseMapper.delete_by_id(ident=case.caseId)    return Response.success()@router.get("/query_all", description="查询所有用例")async def query_cases(_: User = Depends(Authentication())):    cases = await PlayCaseMapper.query_all()    return Response.success(cases)@router.post("/page", description="分页查询")async def page_cases(pageInfo: PagePlayCaseSchema, _: User = Depends(Authentication())):    data = await PlayCaseMapper.page_by_module(**pageInfo.model_dump(exclude_none=True,                                                                     exclude_unset=True))    return Response.success(data)@router.post("/copy", description="复制用例")async def copy_case(case: GetPlayCaseByCaseId, cr: User = Depends(Authentication())):    case = await PlayCaseMapper.copy_case(        caseId=case.caseId, cr=cr)    return Response.success(case)@router.get("/query_steps", description="用例步骤列表")async def query_steps(caseId: int, _: User = Depends(Authentication())):    data = await PlayStepMapper.query_steps_by_caseId(caseId=caseId)    return Response.success(data)@router.post("/reorder_step", description="排序步骤")async def order_step(stepInfo: ReOrderPlayStepSchema, _: User = Depends(Authentication())):    await PlayCaseMapper.reorder_step(**stepInfo.model_dump())    return Response.success()@router.post("/insert_common_step", description="添加公共步骤")async def insert_common_step(stepInfo: PlayCaseChoiceStepSchema, cr: User = Depends(Authentication())):    await PlayCaseMapper.insert_choices_common_step(**stepInfo.model_dump(), cr=cr)    return Response.success()@router.post("/insert_group_step", description="添加公共步骤组")async def insert_common_step(stepInfo: PlayCaseChoiceGroupStepSchema, cr: User = Depends(Authentication())):    await PlayCaseMapper.insert_choices_group_step(**stepInfo.model_dump(), cr=cr)    return Response.success()@router.post("/remove_step", description="删除步骤")async def remove_step(stepInfo: RemovePlayStepSchema, _: User = Depends(Authentication())):    await PlayCaseMapper.remove_step(**stepInfo.model_dump())    return Response.success()@router.post("/copy_step", description="删除步骤")async def copy_step(stepInfo: CopyPlayCaseStepSchema, cr: User = Depends(Authentication())):    await PlayCaseMapper.copy_step(**stepInfo.model_dump(), cr=cr)    return Response.success()# =====================================  RESUlT ===========================================================@router.post("/page_result", description="用例结果分页查询")async def page_case_result(pageInfo: PagePlayCaseResultSchema, _: User = Depends(Authentication())):    """    分页查询    """    data = await PlayCaseResultMapper.page_query(**pageInfo.model_dump(exclude_none=True,                                                                       exclude_unset=True))    return Response.success(data)@router.get("/result_detail", description="用例结果详情")async def get_case_result(uid: str, _: User = Depends(Authentication())):    result = await PlayCaseResultMapper.get_by_uid(uid)    return Response.success(result)@router.get("/result_clear", description="清空调试历史")async def clear_result(caseId: int, _: User = Depends(Authentication())):    await PlayCaseResultMapper.clear_case_result(caseId=caseId)    return Response.success()# =====================================  VARs ====================================================@router.post("/add_variable", description="添加前置变量")async def add_variable(var: InsertPlayCaseVariableSchema, _: User = Depends(Authentication())):    """    添加前置变量    """    await PlayCaseVariablesMapper.insert(**var.model_dump(), user=_)    return Response.success()@router.post("/remove_variable", description="添加前置变量")async def remove_variable(var: GetPlayCaseVariableSchema, _: User = Depends(Authentication())):    """    添加前置变量    """    await PlayCaseVariablesMapper.delete_by_uid(var.uid)    return Response.success()@router.post("/edit_variable", description="添加前置变量")async def edit_variable(var: EditPlayCaseVariableSchema, _: User = Depends(Authentication())):    """    添加前置变量    """    await PlayCaseVariablesMapper.update_by_id(**var.model_dump(exclude_none=True),                                               updateUser=_)    return Response.success()@router.post("/page_variable", description="前置变量分页")async def page_variable(pageInfo: PagePlayCaseVariableSchema, _: User = Depends(Authentication())):    data = await PlayCaseVariablesMapper.page_query(**pageInfo.model_dump(        exclude_none=True    ))    return Response.success(data)@router.get("/query_variable", description="前置变量")async def query_variable(caseId: int, _: User = Depends(Authentication())):    data = await PlayCaseVariablesMapper.query_by(play_case_id=caseId)    return Response.success(data)@router.post("/execute_back", description='后台执行')async def execute_back(info: GetPlayCaseByCaseId, sr: User = Depends(Authentication())):    create_task(Player(UIStarter(sr)).run_case(info.caseId))    return Response.success()