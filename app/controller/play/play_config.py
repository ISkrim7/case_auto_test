#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/3# @Author : cyq# @File : play_config# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.mapper.play.playConfigMapper import PlayMethodMapperfrom app.response import Responsefrom app.schema.play import GetPlayMethodSchema, EditPlayMethodSchema, PagePlayMethodSchema, AddPlayMethodSchemarouter = APIRouter(prefix="/play/config", tags=['UI配置'])@router.post('/method/page', description="分页")async def method_page(pageInfo: PagePlayMethodSchema, _=Depends(Authentication())):    pageInfo = await PlayMethodMapper.page_query(        **pageInfo.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success(pageInfo)@router.get('/method/detail', description="详情")async def method_detail(method: GetPlayMethodSchema, _=Depends(Authentication())):    method = await PlayMethodMapper.get_by_uid(method.uid)    return Response.success(method)@router.get("/method/list", description="列表")async def method_list(_=Depends(Authentication())):    methods = await PlayMethodMapper.query_all()    return Response.success(methods)@router.post("/method/add", description="新增")async def add_method(method: AddPlayMethodSchema, cr=Depends(Authentication())):    await PlayMethodMapper.save(        creatorUser=cr,        **method.model_dump()    )    return Response.success()@router.post("/method/update", description="修改")async def update_method(method: EditPlayMethodSchema, ur=Depends(Authentication())):    await PlayMethodMapper.update_by_uid(        updateUser=ur,        **method.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success()@router.post("/method/remove", description="删除")async def remove_method(method: GetPlayMethodSchema, _=Depends(Authentication())):    await PlayMethodMapper.delete_by_uid(method.uid)    return Response.success()# @router.post("/env/add", description="新增环境")# async def add_env(env: AddEnvSchema, cr: User = Depends(Authentication())):#     await UIEnvMapper.save(#         creatorUser=cr,#         **env.model_dump()#     )#     return Response.success()