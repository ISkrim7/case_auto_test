#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceApi# @Software: PyCharm# @Desc:from fastapi import APIRouter, Depends, BackgroundTasks, Response as FastResponsefrom app.controller import Authenticationfrom app.exception import CommonErrorfrom app.mapper.interface import InterfaceScriptMapper, InterfaceMapperfrom app.model.base import Userfrom app.response import Responsefrom app.schema.interface import *from app.schema.interface.interfaceApiSchema import TryScriptSchemafrom interface.exec import ExecScriptForInterfacefrom interface.fileReader import FileReaderfrom interface.starter import APIStarterfrom utils import MyLoguru, logfrom interface.runner import InterFaceRunnerfrom utils.curlTrans import CurlConverterLOG = MyLoguru().get_logger()router = APIRouter(prefix="/interface", tags=['自动化接口步骤'])API_Exclude_Field = {    "params", "headers", "extracts", "after_script", "asserts", "before_db_id", "before_params",    "before_script", "before_sql", "before_sql_extracts", "body", "body_type", "connect_timeout",    "follow_redirects"}@router.post("/setInterfaceModule", description="设置接口部分")async def set_interface_Module(info: SetInterfacesModuleSchema, _=Depends(Authentication())):    await InterfaceMapper.set_interfaces_modules(**info.model_dump())    return Response.success()@router.post("/insert", description="添加步骤")async def insert_interface_Api(ApiInfo: AddInterfaceApiSchema, auth=Depends(Authentication())):    api = await InterfaceMapper.save(        creatorUser=auth,        **ApiInfo.model_dump())    return Response.success(api)@router.get("/detail", description="接口信息")async def detail_interface(interfaceId: int, _=Depends(Authentication())):    inter = await InterfaceMapper.get_by_id(interfaceId)    return Response.success(inter)@router.post("/copy", description="复制")async def detail_interface(interfaceId: CopyInterfaceApiSchema, copyer=Depends(Authentication())):    inter = await InterfaceMapper.copy_api(        is_common=True,        apiId=interfaceId.id,        creator=copyer    )    return Response.success(inter)@router.post("/tryScript", description="调试脚本")async def try_script(scriptInfo: TryScriptSchema, _=Depends(Authentication())):    sc = ExecScriptForInterface()    data = sc.exec_script(scriptInfo.script)    return Response.success(data)@router.get("/queryBy", description="批量查询")async def query_by_interface(inter: InterfaceApiFieldSchema, _=Depends(Authentication())):    inters = await InterfaceMapper.get_by(**inter.model_dump(        exclude_unset=True,        exclude_none=True,    ))    return Response.success(inters)@router.post("/page", description="分页查询")async def page_interface(inter: PageInterfaceApiSchema, _=Depends(Authentication())):    inters = await InterfaceMapper.page_by_module(        **inter.model_dump(            exclude_unset=True,            exclude_none=True        )    )    return Response.success(data=inters, exclude=API_Exclude_Field)@router.post("/pageNoModule", description="分页查询")async def page_interface_no_module(inter: PageInterfaceApiSchema, _=Depends(Authentication())):    inters = await InterfaceMapper.page_query(        module_id=None,        **inter.model_dump(            exclude_unset=True,            exclude_none=True        )    )    return Response.success(inters, exclude=API_Exclude_Field)@router.post("/update", description="修改接口")async def update_interface(inter: UpdateInterfaceApiSchema, auth=Depends(Authentication())):    api = await InterfaceMapper.update_by_id(**inter.model_dump(        exclude_unset=True,    ), updateUser=auth)    ## 当更新了data    await InterfaceMapper.update_data_file(api)    return Response.success()@router.post("/remove", description="删除")async def remove_interface(inter: RemoveInterfaceApiSchema, _=Depends(Authentication())):    await InterfaceMapper.remove(inter.id)    return Response.success()@router.post("/try", description="调试")async def try_interface_Api(interId: TryAddInterfaceApiSchema, user=Depends(Authentication())):    """api 执行 """    resp = await InterFaceRunner(        starter=APIStarter(user),    ).try_interface(interface=interId.interfaceId)    LOG.info(f"{resp}")    return Response.success([resp])@router.get("/query/script_doc", description="Api可用脚本")async def get_interface_script_doc(_: User = Depends(Authentication())):    docs = await InterfaceScriptMapper.query_all()    return Response.success(docs)@router.post("/transCurl", description="转换curl")async def tansCurlScript(script: CurlSchema, _: User = Depends(Authentication())):    """转换curl"""    try:        info = CurlConverter(script.script).parse_curl()        return Response.success(info)    except Exception:        return Response.error("解析失败、请检查")@router.post("/debugPerf", description="调试执行")async def debug_perf(info: PerfSchema, background_tasks: BackgroundTasks, user: User = Depends(Authentication())):    log.debug(info)    _starter = APIStarter(user)    interfaceInfo = await InterFaceRunner(        starter=_starter    ).get_interface(interfaceId=info.interfaceId)    from common.locustClient import locust_client    from utils import GenerateTools    from app.schema.interface import InterfaceApiSchema    interfaceInfo['body'] = interfaceInfo.pop('json')    log.debug(interfaceInfo)    apiSchema = InterfaceApiSchema(**interfaceInfo)    log.error(apiSchema)    taskId = f"interface{info.interfaceId}_{GenerateTools.uid()}"    try:        # background_tasks.add_task(        #     locust_client.start_locust,        #     taskId=taskId,        #     domain=interfaceInfo.pop("host"),        #     method=interfaceInfo.pop("method"),        #     url=interfaceInfo.pop("url"),        #     request_info=interfaceInfo,        #     users=info.perf_user,        #     spawn_rate=info.perf_spawn_rate,        #     duration=info.perf_duration * 60,        #     wait_range=info.wait_range,        #     io=_starter        # )        background_tasks.add_task(            locust_client.start_locust2,            api=apiSchema,            setting=info,            io=_starter        )    except Exception as e:        raise e    return Response.success(taskId)@router.get("/stopPerf", description="停止")async def stop_perf(taskId: str, background_tasks: BackgroundTasks, user: User = Depends(Authentication())):    from common.locustClient import locust_client    io = APIStarter(user)    try:        background_tasks.add_task(            locust_client.stop,            taskId=taskId,            io=io        )        return Response.success()    except Exception as e:        log.exception(e)        return Response.error(str(e))@router.get("/apisInfo/yaml", description="下载yaml")async def api_yaml_info(moduleId: int, _: User = Depends(Authentication())):    """下载"""    import yaml    try:        interfaces = await InterfaceMapper.query_by(module_id=moduleId)        if interfaces:            data = {                "moduleId": moduleId,                "apis": [inter.map for inter in interfaces]            }            return FastResponse(                content=yaml.dump(data),                media_type="text/yaml",                headers={"Content-Disposition": f"attachment; filename=interfaces.yaml"}            )        else:            # 如果无数据，返回空的 YAML 文件            empty_yaml = yaml.dump({"moduleId": moduleId, "apis": []})            return FastResponse(                content=empty_yaml,                media_type="text/yaml",                headers={"Content-Disposition": f"attachment; filename=interfaces.yaml"}            )    except Exception as e:        raise e