#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/8/25# @Author : cyq# @File : requirements# @Software: PyCharm# @Desc:from fastapi import APIRouter, Dependsfrom app.controller import Authenticationfrom app.model.base import Userfrom app.response import Responsefrom app.schema.hub.requirementSchema import *from app.mapper.caseHub.requirementMapper import RequirementMapperfrom utils import logrouter = APIRouter(prefix="/hub", tags=['需求'])@router.post("/insertRequirement", description='添加需求信息')async def insert_requirement(req: AddRequirementsSchema, ur: User = Depends(Authentication())):    data = await RequirementMapper.save(        creatorUser=ur,        **req.model_dump()    )    return Response.success(data)@router.post("/updateRequirement", description='更新需求信息')async def update_requirement(req: UpdateRequirementsSchema, ur: User = Depends(Authentication())):    data = await RequirementMapper.update_by_id(        updateUser=ur,        **req.model_dump(exclude_none=True)    )    return Response.success(data)@router.post("/removeRequirement", description='删除需求信息')async def remove_requirement(req: RemoveRequirementsSchema, _: User = Depends(Authentication())):    await RequirementMapper.delete_by_id(        req.requirementId    )    return Response.success()@router.get("/getRequirement", description='获取需求信息')async def get_requirement(requirementId: int, _: User = Depends(Authentication())):    data = await RequirementMapper.req_info(        ident=requirementId    )    return Response.success(data)@router.post("/pageRequirement", description='分页需求信息')async def page_requirement(req: PageRequirementsSchema, _: User = Depends(Authentication())):    log.info(req)    data = await RequirementMapper.page_by_module(        **req.model_dump(exclude_none=True, exclude_unset=True)    )    return Response.success(data)