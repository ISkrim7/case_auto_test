#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/6/6# @Author : cyq# @File : _response# @Software: PyCharm# @Desc:from datetime import datetime, datefrom typing import Any, Set, Optional, Dictfrom app.model import BaseModelfrom types import GeneratorTypeclass Response:    """    提供统一的响应格式化工具。    """    @staticmethod    def encode_json(data: Any, exclude: Optional[Set[str]] = None) -> Dict[str, Any]:        """        将任意对象编码为JSON格式。        :param data: 需要编码的数据。        :param exclude: 需要排除的字段集合。        :return: JSON格式的字典。        """        return jsonable_encoder(data, exclude=exclude)    @staticmethod    def success(data: Optional[Any] = None, code: int = 0, msg: str = "ok", exclude: Optional[Set[str]] = None) -> Dict[        str, Any]:        """        返回成功的响应。        :param data: 成功的数据。        :param code: 响应码，默认为0。        :param msg: 响应消息，默认为"ok"。        :param exclude: 需要排除的字段集合。        :return: 成功的响应字典。        """        return Response.encode_json({"code": code, "data": data, "msg": msg}, exclude)    @staticmethod    def error(msg: str) -> Dict[str, Any]:        """        返回错误的响应。        :param msg: 错误消息。        :return: 错误的响应字典。        """        return Response.encode_json({"code": 1, "data": None, "msg": msg})def jsonable_encoder(        obj: Any,        exclude: Optional[Set[str]] = None) -> Any:    """    将任意对象编码为可JSON序列化的格式。    :param obj: 需要编码的对象。    :param exclude: 需要排除的字段集合。    :return: 可JSON序列化的对象。    """    # sqlAlchemy 模型实例    if isinstance(obj, BaseModel):        data = obj.to_dict(exclude)        return jsonable_encoder(data, exclude=exclude)    # 处理基本类型    if isinstance(obj, (str, int, float, type(None))):        return obj    if isinstance(obj, (datetime, date)):        return obj.strftime('%Y-%m-%d %H:%M:%S')    # 处理字典类型    if isinstance(obj, dict):        return {key: jsonable_encoder(value, exclude=exclude) for key, value in obj.items()                if                # value is not None and                (not exclude or key not in exclude)}    # 处理列表、集合、生成器、元组类型    if isinstance(obj, (list, set, frozenset, GeneratorType, tuple)):        return [jsonable_encoder(item, exclude=exclude) for item in obj]    raise TypeError(f"Object of type {obj.__class__.__name__} is not JSON serializable")