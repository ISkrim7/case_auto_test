#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/8/27# @Author : cyq# @File : testCaseSchema# @Software: PyCharm# @Desc:from typing import List, Optionalfrom pydantic import BaseModel, Fieldfrom app.schema import PageSchemafrom enums import ModuleEnumfrom enums.CaseEnum import CaseLevelclass TestCaseStep(BaseModel):    action: Optional[str] = None    expected_result: Optional[str] = None    id: Optional[int] = Noneclass TestCaseField(BaseModel):    case_name: Optional[str] = Field(None)    case_level: Optional[str] = Field(CaseLevel.P2)    case_type: Optional[int] = Field(1, description=" 1'普通' | 2'冒烟' | 3 回归")    case_tag: Optional[str] = Field(None)    case_setup: Optional[str] = Field(None)    case_status: Optional[int] = Field(0)    case_mark: Optional[str] = Field(None)    is_review: Optional[bool] = Field(False)    is_common: Optional[bool] = Field(False)    module_id: Optional[int] = Field(None)    project_id: Optional[int] = Field(None)    case_sub_steps: List[TestCaseStep] | None = Noneclass AddTestCaseSchema(TestCaseField):    requirementId: Optional[int] = Field(None)    case_name: str    case_tag: str    case_mark: Optional[str] = Field(None)    module_id: Optional[int] = Field(None)    project_id: Optional[int] = Field(None)class UpdateTestCaseSchema(TestCaseField):    id: intclass UpdateTestCaseStatusSchema(BaseModel):    id: int    case_status: intclass PageTestCaseSchema(PageSchema, TestCaseField):    module_type: int = ModuleEnum.CASE    case_level: Optional[str] = Field(None)    case_type: Optional[int] = Field(None)    case_status: Optional[int] = Field(None)    is_review: Optional[bool] = Field(None)class QueryTestCaseSchemaByReq(BaseModel):    requirementId: intclass AddDefaultCaseSchema(QueryTestCaseSchemaByReq):    ...class QueryTestCaseSchemaByField(BaseModel):    requirementId: int    case_name: Optional[str] = Field(None)    case_level: Optional[str] = Field(None)    case_type: Optional[int] = Field(None)    case_tag: Optional[str] = Field(None)    case_status: Optional[int] = Field(None)class CopyCase(BaseModel):    caseId: int    requirementId: Optional[int] = Field(None)class RemoveCaseSchema(CopyCase):    ...class CopyCaseStep(BaseModel):    stepId: intclass ReorderCase(BaseModel):    requirementId: int    caseIds: List[int]class ReorderCaseStep(BaseModel):    stepIds: List[int]class RemoveCaseStep(BaseModel):    stepId: intclass AddDefaultCaseStep(BaseModel):    caseId: intclass UpdateTestCaseStep(BaseModel):    id: int    action: Optional[str] = None    expected_result: Optional[str] = None    order: Optional[int]class SetCasesStatusSchema(BaseModel):    caseIds: List[int]    status: intclass SetCasesCommonSchema(BaseModel):    caseIds: List[int]    module_id: int    project_id: int