#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/20# @Author : cyq# @File : interfaceApiSchema# @Software: PyCharm# @Desc:from app.schema import PageSchemafrom enums.ModuleEnum import ModuleEnumfrom typing import List, Dict, Any, Literalfrom pydantic import BaseModel, Field, computed_fieldclass IItem(BaseModel):    """    headers 等的结构定义    """    id: int | str = Field(..., description=" id")    key: str = Field(..., description="键", title="Key")    value: Any | None = Field(..., description="值")    desc: str | None = Field(None, description="描述")class IBeforeSqlExtracts(BaseModel):    id: int | str = Field(..., description=" id")    jp: str = Field(..., description="jp", title="jp")    key: str = Field(..., description="key")class IExtract(BaseModel):    """    提取    """    key: str = Field(..., description="键", title="Key")    value: Any | None = Field(..., description="值")    target: int = Field(..., description="目标")    extraOpt: str = Field(..., description="类型")class IAssert(BaseModel):    """    断言    """    assert_name: str = Field(..., description="断言名")    assert_switch: bool = Field(True, description="是否开启断言")    assert_target: str = Field(..., description="断言目标")    assert_extract: str | None = Field(None, description="提取")    assert_text: str | None = Field(None, description="表达式")    assert_opt: str = Field(..., description="断言类型")    assert_value: Any = Field(..., description="预期值")class InterfaceApiFieldSchema(BaseModel):    """    接口步骤字段    """    # 基本信息    id: int | None = None    uid: str | None = None    name: str | None = None    description: str | None = None    method: Literal["GET", "POST", "PUT", "DELETE"] = Field(default="GET", description="请求方法")    status: str | None = None    level: str | None = None    # 请求    url: str | None = None    headers: List[IItem] | None = None    params: List[IItem] | None = None    data: List[IItem] | None = None    extracts: List[IExtract] | None = None    asserts: List[IAssert] | None = None    body: Any | None = None    # 超时设置    connect_timeout: int = Field(default=6, description="连接超时时间（秒）")    response_timeout: int = Field(default=6, description="响应超时时间（秒）")    before_script: str | None = None    before_db_id: int | None = None    before_sql: str | None = None    before_sql_extracts: List[IBeforeSqlExtracts] | None = None    before_params: List[IItem] | None = None    after_sql: str | None = None    after_sql_extracts: List[IBeforeSqlExtracts] | None = None    after_params: List[IItem] | None = None    after_script: str | None = None    project_id: int | None = None    env_id: int | None = None    module_id: int | None = None    body_type: int | None = None    raw_type: str | None = Field(None, description='json 类型 json、text')    follow_redirects: int | None = None    is_common: int | None = None    enable: bool | None = None    is_group: bool | None = None    group_id: int | None = None    creator: int | None = None    creatorName: str | None = Noneclass SaveRecordSchema(BaseModel):    name: str    is_common: int = 1    module_id: int    project_id: int    status: str | None = None    level: str | None = None    recordId: strclass SaveRecordToCaseSchema(BaseModel):    recordId: str    caseId: intclass SetInterfacesModuleSchema(BaseModel):    module_id: int    interfaces: List[int]class AddInterfaceApiSchema(InterfaceApiFieldSchema):    name: str    description: str    method: str    url: str    project_id: int    module_id: int = Field(ModuleEnum.API, description="模块类型")    status: str    level: str    body_type: int = 0    follow_redirects: int = 0    is_common: int = 1class TryScriptSchema(BaseModel):    script: strclass UploadApiSchema(BaseModel):    valueType: intclass UpdateInterfaceApiSchema(InterfaceApiFieldSchema):    id: intclass RemoveInterfaceApiSchema(BaseModel):    id: intclass CopyInterfaceApiSchema(BaseModel):    id: intclass CurlSchema(BaseModel):    script: strclass TryAddInterfaceApiSchema(InterfaceApiFieldSchema):    interfaceId: intclass PageInterfaceApiSchema(InterfaceApiFieldSchema, PageSchema):    module_type: int = ModuleEnum.APIclass RecordingSchema(BaseModel):    url: str | None = ""    method: List[str] | Noneclass PerfSchema(BaseModel):    interfaceId: int = Field(..., title="接口ID", description="接口id")    perf_user: int = Field(..., description="用户数量")    perf_duration: float = Field(..., description="执行时长")    perf_spawn_rate: int = Field(..., description="生成率")    wait_range: str | None = Field(None)    file_name: str | None = Field(None)    @computed_field    @property    def perf_duration_per_minute(self) -> float:        """        实际运行时间        perf_duration * 60        """        return self.perf_duration * 60    @computed_field    @property    def perf_wait_range(self) -> List[int]:        """        等待区间        """        if not self.wait_range:            return [0, 0]        else:            try:                return [int(i) for i in self.wait_range.split(",")]            except Exception as e:                return [0, 0]class InterfaceApiSchema(BaseModel):    name: str    method: str    url: str    host: str    headers: Dict[str, Any] | None = Field(None)    data: Dict[str, Any] | str | None = Field(None)    body: Dict[str, Any] | None = Field(None)    params: Dict[str, Any] | None = Field(None)    @property    def requestInfo(self):        return {"headers": self.headers,                "data": self.data,                "json": self.body,                "params": self.params,                }__all__ = [    "InterfaceApiSchema",    "PerfSchema",    "RecordingSchema",    "TryScriptSchema",    "CopyInterfaceApiSchema",    "AddInterfaceApiSchema",    "TryAddInterfaceApiSchema",    "PageInterfaceApiSchema",    "InterfaceApiFieldSchema",    "UpdateInterfaceApiSchema",    "RemoveInterfaceApiSchema",    "SetInterfacesModuleSchema",    "CurlSchema",    "IAssert"]