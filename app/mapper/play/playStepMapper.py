#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/2# @Author : cyq# @File : playStepMapper# @Software: PyCharm# @Desc:from typing import Listfrom sqlalchemy import select, update, and_, deletefrom sqlalchemy.ext.asyncio import AsyncSessionfrom app.mapper import Mapperfrom app.model import async_sessionfrom app.model.base import Userfrom app.model.playUI import PlayStep, PlayCaseStepAssociation, PlayCasefrom utils import MyLogurulog = MyLoguru().get_logger()__all__ = ["PlayStepMapper"]class PlayStepMapper(Mapper):    __model__ = PlayStep    @classmethod    async def remove_association_api(cls, stepId: int):        """        删除关联        """        try:            async with async_session() as session:                await session.execute(                    update(cls.__model__).where(                        cls.__model__.id == stepId                    ).values(                        interface_id=None,                        interface_a_or_b=None,                        interface_fail_stop=None                    )                )                await session.commit()        except Exception as e:            raise e    @classmethod    async def reorder_condition_steps(cls, stepIds: List[int]):        try:            async with async_session() as session:                for index, stepId in enumerate(stepIds, start=1):                    await session.execute(                        update(cls.__model__).where(                            cls.__model__.id == stepId                        ).values(                            step_condition_order=index                        )                    )                await session.commit()        except Exception as e:            raise e    @classmethod    async def insert_condition_step(cls, stepId: int, **kwargs):        try:            async with async_session() as session:                async with session.begin():                    last_index = await get_condition_order(session, stepId)                    kwargs["step_condition_order"] = last_index + 1                    kwargs["step_condition_id"] = stepId                    await cls.save_no_session(session, **kwargs)        except Exception as e:            raise e    @classmethod    async def query_condition(cls, stepId: int) -> List[PlayStep]:        """        查询条件字步骤        """        try:            async with async_session() as session:                query = await session.scalars(                    select(cls.__model__).where(                        cls.__model__.step_condition_id == stepId                    ).order_by(cls.__model__.step_condition_order)                )                return query.all()        except Exception as e:            raise e    @classmethod    async def remove_condition(cls, stepId: int):        """        删除条件        与条件字步骤        """        try:            async with async_session() as session:                await session.execute(                    update(cls.__model__).where(                        cls.__model__.id == stepId                    ).values(                        condition=None,                    )                )                await session.execute(                    delete(cls.__model__).where(                        cls.__model__.step_condition_id == stepId                    )                )                await session.commit()        except Exception as e:            raise e    @classmethod    async def remove_association_db(cls, stepId: int):        """        删除关联        """        try:            async with async_session() as session:                await session.execute(                    update(cls.__model__).where(                        cls.__model__.id == stepId                    ).values(                        db_id=None,                        sql_script=None,                        db_a_or_b=None                    )                )                await session.commit()        except Exception as e:            raise e    @classmethod    async def association_api(cls, stepId: int, apiId: int, interface_a_or_b: int, interface_fail_stop: int):        """        关联        """        try:            async with async_session() as session:                await session.execute(                    update(cls.__model__).where(                        cls.__model__.id == stepId                    ).values(                        interface_id=apiId,                        interface_a_or_b=interface_a_or_b,                        interface_fail_stop=interface_fail_stop                    )                )                await session.commit()        except Exception as e:            raise e    @classmethod    async def query_steps_by_caseId(cls, caseId: int, session: AsyncSession = None):        """        通过 case Id 查 所有step        """        stmt = select(cls.__model__).join(            PlayCaseStepAssociation,            PlayCaseStepAssociation.play_step_id == cls.__model__.id        ).where(            PlayCaseStepAssociation.play_case_id == caseId        ).order_by(PlayCaseStepAssociation.step_order)        try:            if session:                _ = await session.scalars(stmt)                return _.all()            else:                async with async_session() as session:                    _ = await session.scalars(stmt)                    return _.all()        except Exception as e:            raise e    @classmethod    async def remove_sub_step(cls, stepId: int):        """        删除step        """        try:            async with async_session() as session:                step: PlayStep = await cls.get_by_id(ident=stepId, session=session)                group_step: PlayStep = await cls.get_by_id(ident=step.group_id, session=session)                if group_step.step_num > 0:                    group_step.step_num -= 1                await session.delete(step)                await session.commit()        except Exception as e:            raise e    @classmethod    async def copy_sub_step(cls, stepId: int, cr: User):        """        复制 组步骤        """        try:            async with async_session() as session:                async with session.begin():                    step: PlayStep = await cls.get_by_id(ident=stepId, session=session)                    group_step: PlayStep = await cls.get_by_id(ident=step.group_id, session=session)                    last_index = await get_group_order(session, group_step.id)                    new_step: PlayStep = await cls.copy_step(stepId, cr, copy_step_name=False, session=session)                    new_step.step_order = last_index + 1                    group_step.step_num += 1                    await session.commit()        except Exception as e:            raise e    @classmethod    async def copy_step(cls, stepId: int, cr: User, copy_step_name: bool = False, is_common: bool = False,                        session: AsyncSession = None) -> PlayStep:        """        步骤复制        :param stepId:目标步骤ID        :param cr:User 创建人        :param copy_step_name: 是否完全复制步骤名 否则 + （副本）        :param is_common:是否复制成公共        :param session:上下文        :return PlayStep        """        # 使用传入的session或创建新的        should_close = False        if session is None:            session = async_session()            should_close = True        try:            # 查询步骤            step: PlayStep = await cls.get_by_id(ident=stepId, session=session)            new_step = step.copy_map            if copy_step_name is False:                new_step['name'] = f"{new_step['name']} (副本)"            new_step.update({                'is_common_step': is_common,                'creator': cr.id,                'creatorName': cr.username            })            result = await cls.save_no_session(**new_step, session=session)            # 如果是临时session，需要提交            if should_close:                await session.commit()            return result        except Exception as e:            # 发生异常时回滚            if should_close and session:                await session.rollback()            raise e        finally:            if should_close and session:                await session.close()    @classmethod    async def query_case_by_step_id(cls, stepId: int, session: AsyncSession = None, need_order: bool = True):        """        通过step ID 查询所关联的Case        :param  stepId        :param session        :param need_order        """        # 使用传入的session或创建新的        should_close = False        if session is None:            session = async_session()            should_close = True        try:            stmt = select(PlayCase).join(                PlayCaseStepAssociation,                PlayCaseStepAssociation.play_case_id == PlayCase.id            ).where(                PlayCaseStepAssociation.play_step_id == stepId            )            if need_order:                stmt = stmt.add_columns(PlayCaseStepAssociation.step_order.label("step_order"))            result = await session.execute(stmt)            rows = result.all()            if need_order:                cases = []                for row in rows:                    case_dict = row.PlayCase.to_dict()                    case_dict["step_order"] = row.step_order                    cases.append(case_dict)                return cases            else:                return [row.PlayCase for row in rows]        except Exception as e:            raise e        finally:            if should_close and session:                await session.close()    @classmethod    async def query_steps_by_groupId(cls, groupId: int):        """        查询group 子步骤 order 排序        """        try:            async with async_session() as session:                result = await session.scalars(                    select(cls.__model__).where(cls.__model__.group_id == groupId).order_by(cls.__model__.step_order))                return result.all()        except Exception as e:            raise e    @classmethod    async def insert_sub_step(cls, group_id: int, cr: User, **kwargs):        """        向组 插入 sub step        """        try:            async with async_session() as session:                async with session.begin():                    step_group: PlayStep = await cls.get_by_id(ident=group_id, session=session)                    last_index = await get_group_order(session, group_id)                    kwargs['is_group'] = False                    kwargs['step_order'] = last_index + 1                    kwargs['group_id'] = group_id                    kwargs['creator'] = cr.creator                    kwargs['creatorName'] = cr.username                    await cls.save_no_session(**kwargs, session=session)                    step_group.step_num += 1        except Exception as e:            raise e    @classmethod    async def reorder_sub_step(cls, groupId: int, stepIdList: List[int]):        """        重新排序子步骤        """        try:            async with async_session() as session:                for index, stepId in enumerate(stepIdList, start=1):                    await session.execute(                        update(cls.__model__).where(and_(                            cls.__model__.group_id == groupId,                            cls.__model__.id == stepId                        )).values(step_order=index)                    )                    await session.commit()        except Exception as e:            raise e    @classmethod    async def remove_group(cls, groupId: int):        """        删除组        不含公共 删除子步骤        """        try:            async with async_session() as session:                # 子步骤                stmt = delete(cls.__model__).where(                    and_(                        cls.__model__.group_id == groupId                        , cls.__model__.id == groupId                    )                )                await session.execute(stmt)                await session.commit()        except Exception as e:            raise easync def get_group_order(session: AsyncSession, groupId) -> int:    """    获取步骤的排序    """    result = await session.execute(select(PlayStep.step_order)                                   .where(PlayStep.group_id == groupId)                                   .order_by(PlayStep.step_order.desc())                                   .limit(1))    last_step_order = result.scalar()    return last_step_order or 0async def get_condition_order(session: AsyncSession, stepId: int) -> int:    """    获取步骤的排序    """    result = await session.execute(select(PlayStep.step_condition_order)                                   .where(PlayStep.step_condition_id == stepId)                                   .order_by(PlayStep.step_condition_order.desc())                                   .limit(1))    last_step_order = result.scalar()    return last_step_order or 0