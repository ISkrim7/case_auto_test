# !/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/11/19# @Author : cyq# @File : runner# @Software: PyCharm# @Desc:import jsonfrom datetime import datetimefrom typing import List, Dict, Any, Mapping, TypeVar, Tuplefrom httpx import Responsefrom app.mapper.interface.interfaceGroupMapper import InterfaceGroupMapperfrom app.mapper.interface.interfaceVarsMapper import InterfaceVarsMapperfrom app.mapper.project.dbConfigMapper import DbConfigMapperfrom app.mapper.project.env import EnvMapperfrom app.model.interface import InterfaceModel, InterfaceCaseResultModel, InterFaceCaseModel, InterfaceTaskResultModel, \    InterfaceVariablesfrom enums import InterfaceExtractTargetVariablesEnum, InterfaceResponseStatusCodeEnum, InterfaceAPIResultEnum, \    InterfaceCaseErrorStep,InterfaceAPIStatusEnumfrom utils import MyLoguru, GenerateToolsfrom app.mapper.interface import InterfaceMapper, InterfaceCaseMapper, InterfaceGlobalVariableMapperfrom common.fakerClient import FakerClientfrom utils.execDBScript import ExecDBScriptfrom utils.transform import Transformfrom interface.exec import *from .sender import HttpSenderfrom .starter import APIStarterfrom .writer import InterfaceAPIWriterlog = MyLoguru().get_logger()Interface = TypeVar('Interface', bound=InterfaceModel)InterfaceCase = TypeVar('InterfaceCase', bound=InterFaceCaseModel)Interfaces = List[Interface]async def set_req_url(interface: Interface) -> str:    """    设置请求url    :param interface:    :return:    """    try:        if interface.env_id == -1:            return interface.url        else:            env = await EnvMapper.get_by_id(ident=interface.env_id)            domain = env.host            if env.port:                domain += f":{env.port}"            return domain + interface.url    except Exception as e:        log.error(f"设置请求url失败 = {e}")        raise ValueError("请求环境不存在、请检查")class InterFaceRunner:    response: Response | str = None    def __init__(self, starter: APIStarter):        self.starter = starter        self.variables = {}        self.sender = HttpSender(self.variables, self.starter)    def set_variables(self, data: Dict[str, Any] | List[Dict[str, Any]]) -> Dict[str, Any]:        """        设置变量        :param data:        :return:        """        if isinstance(data, dict):            self.variables.update(**data)        elif isinstance(data, list):            data = GenerateTools.list2dict(data)            self.variables.update(**data)        return data    async def try_interface(self, interface: int) -> Mapping[str, Any]:        """        执行单个接口请求调试        无变量、有前置方法、        需要返回response        """        interface = await InterfaceMapper.get_by_id(ident=interface)        result, _ = await self.__execute_interface(interface)        return result    async def get_interface(self, interfaceId: int):        """获取接口信息"""        interface: Interface = await InterfaceMapper.get_by_id(ident=interfaceId)        if interface.env_id == -1:            from utils import Tools            parse = Tools.parse_url(interface.url)            url = parse.path            host = f"{parse.scheme}://{parse.netloc}"        else:            env = await EnvMapper.get_by_id(ident=interface.env_id)            host = env.host            url = interface.url            if env.port:                host += f":{env.port}"        # 1、前置变量参数        await self.__exec_before_params(interface.before_params)        # 2、执行前置函数        await self.__exec_before_script(interface.before_script)        # 3.前置sql        await self.__exec_before_sql(interface)        url = await self.sender.transform_target(target=url)        info = await self.sender.set_req_info(interface)        info.pop("follow_redirects")        info.pop("read")        info.pop("connect")        return {            "name": interface.name,            "method": interface.method.lower(),            "url": url,            "host": host,            **info        }    async def try_group(self, groupId: int):        """        执行接口组        """        interfaces: Interfaces = await InterfaceGroupMapper.query_apis(groupId=groupId)        results = []        for interface in interfaces:            await self.starter.send(f"execute  ： {interface}")            result, _ = await self.__execute_interface(interface)            results.append(result)        return results    async def run_interface_by_task(self, interface: Interface, taskResult: InterfaceTaskResultModel) -> bool:        """任务执行api"""        result, _ = await self.__execute_interface(interface=interface, taskResult=taskResult)        await InterfaceAPIWriter.write_interface_result(**result)        return _    async def run_interfaceCase_by_task(self, interfaceCase: InterfaceCase,                                        taskResult: InterfaceTaskResultModel) -> bool:        """任务执行case"""        interfaces: Interfaces = await InterfaceCaseMapper.query_interface_by_caseId(caseId=interfaceCase.id)        await self.starter.send(f"用例 {interfaceCase.title} 执行开始。执行人 {self.starter.username}")        await self.starter.send(f"查询到关联API x {len(interfaces)} ...")        interfacesNum = len(interfaces)        caseResult = await InterfaceAPIWriter.init_interface_case_result(interfaceCase=interfaceCase,                                                                         taskId=taskResult.id,                                                                         starter=self.starter)        await self.starter.send(f"初始化结果模型 。。。 ✅ ID= '{caseResult.uid}'")        _f = True        try:            for index, interface in enumerate(interfaces, start=1):                await self.starter.send(f"execute  Step {index} ： {interface}")                if interface.is_group:                    # 执行步骤组                    group_interfaces: Interfaces = await InterfaceGroupMapper.query_apis(groupId=interface.group_id)                    for _index, _interface in enumerate(group_interfaces, start=1):                        await self.starter.send(f"execute Group Step {_index} : {_interface} ")                        result, flag = await self.__execute_interface(interface=_interface, caseResult=caseResult)                        await InterfaceAPIWriter.write_interface_result(interfaceGroupId=interface.group_id, **result)                        if not flag:                            _f = False                            caseResult.result = InterfaceAPIResultEnum.ERROR                            break                else:                    result, flag = await self.__execute_interface(interface=interface, caseResult=caseResult)                    # 入库                    await InterfaceAPIWriter.write_interface_result(**result)                    caseResult.progress = round(index / interfacesNum, 1) * 100                    if flag:                        caseResult.success_num += 1                    else:                        _f = False                        caseResult.result = InterfaceAPIResultEnum.ERROR                        caseResult.fail_num += 1                        if interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                            caseResult.progress = 100                            break                await InterfaceAPIWriter.write_process(caseResult=caseResult)            caseResult.interfaceLog = "".join(self.starter.logs)            await InterfaceAPIWriter.write_interface_case_result(caseResult=caseResult)            return _f        finally:            await self.starter.send(f"用例 {interfaceCase.title} 执行结束")            await self.starter.send(f"{'====' * 20}")    async def run_interCase(self, interfaceCaseId: int):        """        执行接口用例        """        interfaceCase: InterfaceCase = await InterfaceCaseMapper.get_by_id(ident=interfaceCaseId)        interfaces: Interfaces = await InterfaceCaseMapper.query_interface_by_caseId(caseId=interfaceCaseId)        await self.starter.send(f"用例 {interfaceCase.title} 执行开始。执行人 {self.starter.username}")        await self.starter.send(f"查询到关联API x {len(interfaces)} ...")        interfacesNum = len(interfaces)        if interfacesNum == 0:            return await self.starter.over()        # 加载用例专属变量        await self.__init_interface_case_vars(interfaceCase)        caseResult = await InterfaceAPIWriter.init_interface_case_result(interfaceCase=interfaceCase,                                                                         starter=self.starter)        await self.starter.send(f"初始化结果模型 。。。 ✅ ID= '{caseResult.uid}'")        try:            total_steps = len(interfaces)  # 总步骤数（包括组步骤）            executed_steps = 0             # 已执行步骤计数器            for index, interface in enumerate(interfaces, start=1):                await self.starter.send(f"✍️✍️ EXECUTE  Step {index} ： {interface}")                if interface.enable == 0:                    await self.starter.send(f"✍️✍️ EXECUTE Step {index} ： 调试禁用 跳过执行")                    continue                if interface.is_group:                    group_interfaces: Interfaces = await InterfaceGroupMapper.query_apis(groupId=interface.group_id)                    group_total = len(group_interfaces)                    group_executed = 0                    group_has_failure = False                    group_success = 0  # 初始化组内成功计数器                    group_fail = 0     # 初始化组内失败计数器                    for _index, _interface in enumerate(group_interfaces, start=1):                        if _interface.enable == 0:                            continue  # 跳过禁用的组内接口                        group_executed += 1                        executed_steps += 1  # 全局步骤计数                        await self.starter.send(f"✍️✍️  EXECUTE Group Step {_index} : {_interface} ")                        result, flag = await self.__execute_interface(interface=_interface, caseResult=caseResult)                        await InterfaceAPIWriter.write_interface_result(interfaceGroupId=interface.group_id, **result)                        #if not flag:                        #    caseResult.result = InterfaceAPIResultEnum.ERROR                        #    break                        if flag:                            #group_success += 1                            caseResult.success_num += 1                        else:                            #group_fail += 1                            group_has_failure = True                            caseResult.fail_num += 1                            caseResult.result = InterfaceAPIResultEnum.ERROR                            if interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                                break  # 停止组内执行                    # 更新用例的总成功和失败数                    caseResult.success_num += group_success                    caseResult.fail_num += group_fail                    # 更新进度（基于外部循环的接口步骤）                    #caseResult.progress = round(index / interfacesNum, 2) * 100                    caseResult.progress = min(round(executed_steps / total_steps * 100, 2), 100)                    # 若组内失败且需要停止，终止整个用例                    if group_fail > 0 and interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                        caseResult.progress = 100                        break  # 停止整个用例                    # 错误停止判断                    if group_has_failure and interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                        await self.starter.send("🛑🛑 组步骤执行失败，终止用例")                        caseResult.progress = 100                        break  # 终止整个用例                else:                    # 处理普通接口                    executed_steps += 1                    result, flag = await self.__execute_interface(interface=interface, caseResult=caseResult)                    # 入库                    await InterfaceAPIWriter.write_interface_result(**result)                    caseResult.progress = round(index / interfacesNum, 1) * 100                    if flag:                        caseResult.success_num += 1                    else:                        caseResult.result = InterfaceAPIResultEnum.ERROR                        caseResult.fail_num += 1                        if interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                            caseResult.progress = 100                            await self.starter.send("🛑🛑 接口步骤执行失败，终止用例")                            break                    # 更新进度                    caseResult.progress = min(round(executed_steps / total_steps * 100, 2), 100)                await InterfaceAPIWriter.write_process(caseResult=caseResult)                if not flag:                    # 更新失败状态                    caseResult.fail_num += 1                    caseResult.result = "FAIL"                    # 错误停止时强制完成状态                    if interfaceCase.error_stop == InterfaceCaseErrorStep.STOP:                        caseResult.status = "OVER"                        caseResult.progress = 100.0                    await InterfaceAPIWriter.write_process(caseResult=caseResult)                await self.starter.send(f"✅✅️ FINISH   Step {index} ： {interface}")                await self.starter.send(f"\n")            await self.starter.send(f"用例 {interfaceCase.title} 执行结束")            await self.starter.send(f"{'====' * 20}")            caseResult.interfaceLog = "".join(self.starter.logs)            return await InterfaceAPIWriter.write_interface_case_result(caseResult=caseResult)        except Exception as e:            # 异常处理部分            caseResult.status = InterfaceAPIResultEnum.ERROR            caseResult.result = InterfaceAPIResultEnum.ERROR            caseResult.interfaceLog += f"\n未捕获异常: {str(e)}"            log.exception(f"用例执行异常: {str(e)}")        finally:            # 确保所有状态设置完成            if caseResult.status in [InterfaceAPIStatusEnum.RUNNING, None]:                caseResult.status = InterfaceAPIStatusEnum.OVER            # 强制设置最终状态            caseResult.status = InterfaceAPIStatusEnum.OVER            # 优化日志截断（考虑多字节字符）            if caseResult.interfaceLog:                truncated_mark = "\n...[日志已截断]"                max_length = 65535 - len(truncated_mark.encode('utf-8'))                encoded_log = caseResult.interfaceLog.encode('utf-8')[:max_length]                caseResult.interfaceLog = encoded_log.decode('utf-8', 'ignore') + truncated_mark            # 强制保存到数据库            await InterfaceAPIWriter.write_interface_case_result(caseResult=caseResult)            # 最后调用over            await self.starter.over(caseResult.id)    async def __execute_interface(self,                                  interface: InterfaceModel,                                  caseResult: InterfaceCaseResultModel = None,                                  taskResult: InterfaceTaskResultModel = None                                  ) -> Tuple[Mapping[str, Any], bool]:        """        API 执行        返回执行结果，flag        """        temp_variables = []        asserts_info = None        url = None        try:            # -1 初始化全局变量            await self.__init_interface_global_vars()            # 0、接口处理请求URL            url = await set_req_url(interface)            # 1、前置变量参数            temp_variables.extend(await self.__exec_before_params(interface.before_params))            # 2、执行前置函数            temp_variables.extend(await self.__exec_before_script(interface.before_script))            # 3.前置sql            temp_variables.extend(await self.__exec_before_sql(interface))            # 4、执行接口请求            self.response = await self.sender(url=url, interface=interface)            # 5、进行断言            asserts_info = await self.__exec_assert(interface)            # 6、出参提取            temp_variables.extend(await self.__exec_extract(interface))            # 7、执行后置函数            temp_variables.extend(await self.__exec_after_script(interface))        except Exception as e:            log.exception(e)            await self.starter.send(f"Error occurred: \"{str(e)}\"")            self.response = f"{str(e)} to {url}"        finally:            return await  InterfaceAPIWriter.set_interface_result_info(                startTime=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),                starter=self.starter,                interface=interface,                response=self.response,                asserts=asserts_info,                caseResult=caseResult,                taskResult=taskResult,                variables=temp_variables            )    async def __exec_before_script(self, script: str) -> List[Any] | List[Mapping[str, Any]]:        """处理前置脚本"""        if script:            exe = ExecScriptForInterface()            _extracted_vars = self.set_variables(exe.exec_script(script))            await self.starter.send(f"🫳🫳 前置脚本 = {json.dumps(_extracted_vars, ensure_ascii=False)}")            _vars = [                {                    InterfaceExtractTargetVariablesEnum.KEY: k,                    InterfaceExtractTargetVariablesEnum.VALUE: v,                    InterfaceExtractTargetVariablesEnum.Target: InterfaceExtractTargetVariablesEnum.BeforeScript                }                for k, v in _extracted_vars.items()            ]            return _vars        return []    async def __exec_before_params(self, before_params: List[Dict[str, Any]] = None):        """处理前置参数"""        if before_params:            trans = Transform(self.variables)            values = await trans.transform_target(before_params)            _extracted_vars = self.set_variables(values)            await self.starter.send(f"🫳🫳 前置参数 = {json.dumps(_extracted_vars, ensure_ascii=False)}")            _vars = [                {                    InterfaceExtractTargetVariablesEnum.KEY: k,                    InterfaceExtractTargetVariablesEnum.VALUE: v,                    InterfaceExtractTargetVariablesEnum.Target: InterfaceExtractTargetVariablesEnum.BeforeParams                }                for k, v in _extracted_vars.items()            ]            return _vars        return []    async def __exec_before_sql(self, interface: InterfaceModel):        """        执行前置sql 操作        ## Select            sql:str            - select username from user => [{username:xxx}{username:xxx}][0]            - select username as un  from user => [{un:xxx}{un:xxx}][0]            sql_extracts: [{key:username,jp:$[0].username},{key:username,jp:$[1].username}]            - select username from user => [{username:xxx}{username:xxx}]            ==>  [{username:xx},{username:xx}]        ## Update        """        # 不执行        if not interface.before_sql or not interface.before_db_id:            return []        _db = await DbConfigMapper.get_by_id(interface.before_db_id)        if not _db:            log.warning(f"未找到数据库配置 ID: {interface.before_db_id}")            return []        trans = Transform(self.variables)        script = await trans.transform_target(interface.before_sql.strip())        db_script = ExecDBScript(self.starter, script, interface.before_sql_extracts)        res = await db_script.invoke(_db.db_type, **_db.config)        await self.starter.send(f"🫳🫳 数据库读取 = {json.dumps(res, ensure_ascii=False)}")        if res:            _vars = [                {                    InterfaceExtractTargetVariablesEnum.KEY: k,                    InterfaceExtractTargetVariablesEnum.VALUE: v,                    InterfaceExtractTargetVariablesEnum.Target: InterfaceExtractTargetVariablesEnum.BeforeSQL                }                for k, v in res.items()            ]            return _vars        return []    async def __exec_assert(self, interface: InterfaceModel):        """        响应断言        前提：        1、有断言        2、有响应        """        _assert = ExecAsserts(self.response, self.variables)        return await _assert(interface.asserts)    async def __exec_extract(self, interface: InterfaceModel):        """        变量提取        前提：        1、有断言        2、有响应        3、响应200        """        if interface.extracts and self.response.status_code == InterfaceResponseStatusCodeEnum.SUCCESS:            _extract = ExecResponseExtract(response=self.response)            _vars = await _extract(interface.extracts)            await self.starter.send(f"🫳🫳  响应参数提取 = {json.dumps(_vars, ensure_ascii=False)}")            self.set_variables(_vars)            return _vars        return []    async def __exec_after_script(self, interface: InterfaceModel):        """        执行后置脚本        """        if interface.after_script and self.response.status_code == InterfaceResponseStatusCodeEnum.SUCCESS:            exe = ExecScriptForInterface(response=self.response)            extracted_vars = self.set_variables(exe.exec_script(interface.after_script))            await self.starter.send(f"🫳🫳 前置脚本 = {json.dumps(extracted_vars, ensure_ascii=False)}")            _vars = [                {                    InterfaceExtractTargetVariablesEnum.KEY: k,                    InterfaceExtractTargetVariablesEnum.VALUE: v,                    InterfaceExtractTargetVariablesEnum.Target: InterfaceExtractTargetVariablesEnum.AfterScript                }                for k, v in extracted_vars.items()            ]            return _vars        return []    async def __init_interface_case_vars(self, interfaceCase: InterfaceCase):        """初始化用例变量"""        try:            interfaceCaseVars: List[InterfaceVariables] = await InterfaceVarsMapper.query_by(case_id=interfaceCase.id)            f = FakerClient()            if interfaceCaseVars:                for var in interfaceCaseVars:                    if var.value.startswith("{{$"):                        _v = var.value[3:-2]                        self.variables[var.key] = f.value(_v)                    else:                        self.variables[var.key] = var.value            if self.variables:                await self.starter.send(f"🫳🫳 初始化用例变量 = {json.dumps(self.variables, ensure_ascii=False)}")        except Exception as e:            log.error(e)    async def __init_interface_global_vars(self):        try:            g_vars = await InterfaceGlobalVariableMapper.query_all()            if g_vars:                for g_var in g_vars:                    self.variables[g_var.key] = g_var.value        except Exception as e:            log.warning(e)