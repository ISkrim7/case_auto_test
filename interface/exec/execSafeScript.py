#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/6/26# @Author : cyq# @File : execSafeScript# @Software: PyCharm# @Desc:import astimport asynciofrom datetime import datetime, timedeltaimport timefrom typing import Any, Dict, Coroutine, Listfrom httpx import Responseimport hashlibfrom utils import MyLoguru, GenerateToolsfrom faker import Fakerlog = MyLoguru().get_logger()BUILTINS = {    '__builtins__': {        'range': range,        'len': len,        'str': str,        'int': int,        'float': float,        'bool': bool,        'list': list,        'dict': dict,        'tuple': tuple,        'set': set,    },}TYPES = (    int, float, str, bool, list, dict, tuple, set, type(None))class ExecSafeScript:    def __init__(self, response: Response = None):        self._response = response        self._logger = log        self._variables = {}        # 允许的函数和变量        self.allowed_functions = {            'ts': self.__ts,            'date': self.__date,            'hub_variables_set': self._hub_variables_set,            'hub_variables_get': self._hub_variables_get,            'hub_variables_remove': self._hub_variables_remove,            "hub_request": self._hub_api_request,            'hub_faker': Faker(locale="zh_CN"),            "hub_md5": self.__md5,            "hub_random": self.__random,            "hub_month_begin": GenerateTools.getMonthFirst        }    def execute(self, script_content: str) -> Dict[str, Any]:        """                脚本执行        """        try:            tree = ast.parse(script_content)        except SyntaxError as e:            log.exception(f"解析脚本失败: {e}")            raise e        # 检查节点        self._validate_ast(tree)        # 3. 准备执行环境        exec_globals = {            **BUILTINS,            **self.allowed_functions,        }        local_vars = {}        try:            exec(compile(tree, '<string>', 'exec'), exec_globals, local_vars)        except Exception as e:            log.exception(f"执行脚本失败: {e}")        return self._collect_results(local_vars)    def _collect_results(self, local_vars: Dict[str, Any]) -> Dict[str, Any]:        """收集执行结果"""        for name, value in local_vars.items():            if not name.startswith('_') and isinstance(value, TYPES):                self._variables[name] = value        self._logger.info(f"执行结果: {self._variables}")        return self._variables    def _validate_ast(self, node):        pass    def _hub_variables_set(self, key: str, value: Any):        self._variables[key] = value    def _hub_variables_get(self, key: str) -> Any:        return self._variables.get(key)    def _hub_variables_remove(self, key: str):        del self._variables[key]        # self._variables.pop(key)    @staticmethod    def _hub_api_request(url: str, method: str, **kwargs):        from httpx import Client        try:            with Client() as client:                response = client.request(method=method, url=url, **kwargs)                return response        except Exception as e:            log.error(f"hub_request error :{e}")    @staticmethod    def __ts(t: str = None) -> int | None:        """        返回对应时间戳        ：param t +1s 秒  +1m 分 +1h分钟        """        if t is None:            return int(time.time())        if not isinstance(t, str) or len(t) < 2:            return None        operator = t[0]        if operator not in "+-":            return None        unit = t[-1]        if unit not in "smh":            return None        try:            value = int(t[1:-1])        except ValueError:            return None        now = datetime.now()        if unit == "s":            delta = timedelta(seconds=value)        elif unit == "m":            delta = timedelta(minutes=value)        else:  # unit == "h"            delta = timedelta(hours=value)        if operator == "+":            result = now + delta        else:            result = now - delta        return int(result.timestamp())    @staticmethod    def __date(t: str = None, ft: str = "%Y-%m-%d") -> str | None:        """        获取当前日期 %Y-%m-%d 格式        :params t  +1d -1d +2m -2m ..        :params ft: 格式 %Y-%m-%d 默认 or %Y-%m-%d %H:%M:%S        """        DELTA_MAP = {            "d": lambda _ts: timedelta(days=_ts),            "m": lambda _ts: timedelta(days=_ts * 30),  # 更接近平均月天数            "y": lambda _ts: timedelta(days=_ts * 365.25)  # 考虑闰年        }        if t is None:            return datetime.today().strftime(ft)        try:            # 校验输入格式是否合法            if not isinstance(t, str) or len(t) < 2:                return None            op = t[0]            unit = t[-1]            value_str = t[1:-1]            if not (value_str.isdigit() and unit in DELTA_MAP):                return None            ts = int(value_str)            delta_func = DELTA_MAP[unit]            delta = delta_func(ts)            if op == "+":                result = datetime.today() + delta            elif op == "-":                result = datetime.today() - delta            else:                return None            return result.strftime(ft)        except Exception as e:            # 捕获所有意外异常，防止崩溃            return None    @staticmethod    def __md5(value: str):        return hashlib.md5(value.encode("utf-8")).hexdigest()    @staticmethod    def __random(values: List[Any]):        import random        return random.choices(values)