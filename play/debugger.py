#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2024/7/4# @Author : cyq# @File : debugger# @Software: PyCharm# @Desc:import base64from hashlib import md5from playwright.async_api import Playwright, expectimport asynciofrom play.browser import get_browser_contextfrom utils import logmd5async def run():    context = await get_browser_context()    page = await context.new_page()    await page.goto("https://playwright.dev/python/")    await page.wait_for_load_state()    text = await page.locator("#__docusaurus_skipToContent_fallback > header > div > h1 > span").text_content()    text2 = await page.locator("#__docusaurus_skipToContent_fallback > header > div > h1 > span").inner_text()    try:        await expect(page.locator("#__docusaurus_skipToContent_fallback > header > div > h1 > span")).to_have_text(expected="Playwright",use_inner_text=True)        await expect(page.locator("__docusaurus_skipToContent_fallback")).not_to_be_attached(attached=False)    except AssertionError as e:        log.error(e)    print(text)    print(text2)    await page.close()    await context.close()if __name__ == '__main__':    # Run main() function sequentially    # asyncio.run(main())    # Run parallel_main() to run multiple tasks in parallel    # asyncio.run(main())    asyncio.run(run())    # asyncio.run(http_req())    # 获取 CustomizeMethod 类中的所有静态方法名称