#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/3/31# @Author : cyq# @File : browser# @Software: PyCharm# @Desc:import asynciofrom playwright.async_api import async_playwright, BrowserContext, Browserfrom typing import Unionfrom config import Configfrom utils import logclass BrowserManager:    _playwright: Union[async_playwright, None] = None    _browser: Union[Browser, None] = None    _lock = asyncio.Lock()    @classmethod    async def get_browser(cls):        async with cls._lock:            if cls._browser is not None and cls._browser.is_connected():                log.info(f"has browser connected={cls._browser.is_connected} return {cls._browser}")                return cls._browser            # 清理旧资源（如果存在）            await cls._cleanup_resources()            return await cls._initialize_browser()    @classmethod    async def _initialize_browser(cls) -> Browser:        """初始化浏览器"""        cls._playwright = await async_playwright().start()        cls._browser = await cls._playwright.chromium.launch(            headless=Config.UI_Headless,            timeout=Config.UI_Timeout,            slow_mo=Config.UI_SLOW,            args=["--no-cache",                  "--no-sandbox",                  "--disable-dev-shm-usage",  # 在Docker中特别有用?                  ],        )        log.info("BrowserContext initialized")        return cls._browser    @classmethod    async def _cleanup_resources(cls):        """清理资源"""        errors = []        if cls._browser:            try:                await cls._browser.close()            except Exception as e:                errors.append(f"Browser close error: {str(e)}")            finally:                cls._browser = None        if cls._playwright:            try:                await cls._playwright.stop()            except Exception as e:                errors.append(f"Playwright stop error: {str(e)}")            finally:                cls._playwright = None        if errors:            log.warning("Cleanup completed with errors: " + "; ".join(errors))    @classmethod    async def shutdown(cls):        """完全关闭所有资源"""        await cls._cleanup_resources()        log.info("BrowserManager shutdown completed")    @classmethod    async def close_browser(cls):        """关闭页面"""        if cls._browser:            await cls._browser.close()async def get_browser_context() -> "BrowserContext":    """每个用例获取独立的 BrowserContext（隔离环境）"""    browser = await BrowserManager.get_browser()  # 浏览器    context = await browser.new_context(        ignore_https_errors=True,        java_script_enabled=True,        viewport={            "width": 1080,            "height": 720,        },    )    context.set_default_timeout(Config.UI_Timeout)    return context