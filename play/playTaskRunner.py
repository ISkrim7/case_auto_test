#!/usr/bin/env python# -*- coding:utf-8 -*-# @Time : 2025/7/23# @Author : cyq# @File : PlayTaskRunner# @Software: PyCharm# @Desc:from typing import List, Sequencefrom playwright._impl._errors import TargetClosedErrorfrom app.mapper.play import PlayCaseResultMapper, PlayStepMapperfrom app.mapper.play.playTaskMapper import PlayTaskMapper, PlayTaskResultMapperfrom app.mapper.project.pushMapper import PushMapperfrom app.model.playUI import PlayTask, PlayTaskResult, PlayCase, PlayCaseResult, PlayStepfrom enums import TaskStatusfrom play.exception import APIAssertException, RetryExceptionfrom play.player import Playerfrom play.starter import UIStarterfrom play.writer import Writerfrom utils import logfrom utils.report import ReportPushclass PlayTaskRunner:    def __init__(self, starter: UIStarter):        self._runner = starter        self._player = Player(self._runner)    async def execute_task(self, taskId: int):        """        任务执行        """        try:            task: PlayTask = await PlayTaskMapper.get_by_id(taskId)            await self._runner.send(f"开始执行任务：{task.title}: {task.desc}")            # 查询待执行用用例            play_cases: List[PlayCase] = await PlayTaskMapper.query_case(taskId)            if not play_cases:                return            # 将task 置为 RUNNER            await PlayTaskMapper.set_task_status(taskId=taskId, status=TaskStatus.RUNNING)            # 初始化结果对象            task_result: PlayTaskResult = await PlayTaskResultMapper.init_task_result(                task=task,                case_total_num=len(play_cases),                runner=self._runner            )            log.debug(f"task result {task_result}")            # 重试次数            max_attempts = task.retry + 1 if task.retry > 0 else 1            await self.__retry_play_case(max_attempts=max_attempts, play_cases=play_cases, task_result=task_result)            # 写结果            await Writer.write_base_result(base_result=task_result)            if task.push_id:                push = await PushMapper.get_by_id(task.push_id)                rp = ReportPush(push_type=push.push_type, push_value=push.push_value)                await rp.push(task, task_result)        except Exception as e:            log.exception(e)    async def __init_cases(self, play_case: PlayCase, task_result: PlayTaskResult):        # 初始化case结果对象        play_case_result = await PlayCaseResultMapper.init_case_result(            play_case=play_case,            user=self._runner,            task_result_id=task_result.id,        )        # 初始化变量        await self._player.init_case_variables(play_case, play_case_result)        await self._player.init_play()        return play_case_result    async def __retry_play_case(self, max_attempts: int, play_cases: List[PlayCase], task_result: PlayTaskResult):        """        任务 用例重试执行机制执行        """        for _case in play_cases:            # 初始化 用例变量 与结果模型            play_case_result: PlayCaseResult = await self.__init_cases(_case, task_result)            # 查询步骤            play_steps: Sequence[PlayStep] = await PlayStepMapper.query_steps_by_caseId(_case.id)            for attempt in range(1, max_attempts + 1):                try:                    await self.__execute_case_steps(                        case_name=_case.title,                        play_steps=play_steps,                        play_case_result=play_case_result,                        retry=(attempt == max_attempts)                    )                    await self._runner.send(f"Case [\"{_case.title}\"] 第 \"{attempt}\" 次尝试成功")                    task_result.success_number += 1                    # 用例执行成功、不继续重试                    await self._runner.send(f'执行完成 >> {_case.title}, 结果: 通过')                    await Writer.write_case_result(play_case_result, self._runner)                    break                except Exception:                    # 记录失败日志（但不写入最终结果）                    error_msg = f'Case [\"{_case.title}\"] 第 {attempt} 次尝试失败 ❌'                    if attempt < max_attempts:                        error_msg += "（将重试）"                    else:                        error_msg += "（最终尝试失败）"                    await self._runner.send(error_msg)                    # 已经是最大尝试次数                    if attempt == max_attempts:                        task_result.fail_number += 1                        await self._player.cleanup_resources()                        break                    else:                        # 继续尝试                        continue    async def __execute_case_steps(self,                                  case_name: str,                                  play_steps: Sequence[PlayStep],                                  play_case_result: PlayCaseResult,                                  retry: bool):        """        任务执行case steps        retry 是否是最终执行条件        不是，只记录日志、关闭page 继续重试        是、记录结果、关闭page 、browser        """        success_flag = True        if not play_steps:            await self._runner.send(f"无用例步骤⚠️ 运行结束")            await Writer.write_case_result(case_result=play_case_result,                                           starter=self._runner)            return success_flag        for i, step in enumerate(play_steps, start=1):            await self._runner.send(f'执行步骤 >> step[{i}] : {step} \n')            try:                if step.is_group:                    # 执行组                    await self._player.execute_group_step(step, play_case_result)                else:                    # 单步骤条件执行                    await self._player.condition_execute(step, play_case_result)            except Exception as e:                if step.is_ignore:                    await self._runner.send('step is ignore, continue...')                    continue                await self._runner.send(f"步骤 \"{step.name}\" 执行失败 >> \"{e}\"")                if retry:                    await self._runner.send(f'Case ["{case_name}"] 全部尝试均失败;')                    error_info = await self._player.format_error_info(i, step, e)                    if not isinstance(e, (TargetClosedError, APIAssertException)):                        errorPath = await self._player.to_screenshot()                        error_info['ui_case_err_step_pic_path'] = errorPath                    await self._runner.send(f'执行完成 >> {case_name}, 结果: 失败')                    # 最后的结果写入case 结果对象                    await Writer.write_case_result(play_case_result, self._runner, error_info)                raise# async def run_Tasks(taskIds: List[int], userId: int, jobName: str = None):#     """#     run for jenkins#     :param taskIds:#     :param userId:#     :param jobName:#     :return:#     """#     try:#         tasks = [Player(UIStarter(StarterEnum.Jenkins)).run_task(task) for task in taskIds]#         await asyncio.gather(*tasks)#     except Exception as e:#         log.error(e)#     finally:#         if jobName:#             server = jenkins.Jenkins(url=Config.JENKINS_URL,#                                      username=Config.JENKINS_USERNAME,#                                      password=Config.JENKINS_PASSWORD)#             log.info(f'build=========={jobName}')#             server.build_job(jobName)__all__ = ["PlayTaskRunner"]